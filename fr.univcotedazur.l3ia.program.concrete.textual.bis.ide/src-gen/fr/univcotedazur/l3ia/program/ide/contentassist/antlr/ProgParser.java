/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.program.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.univcotedazur.l3ia.program.ide.contentassist.antlr.internal.InternalProgParser;
import fr.univcotedazur.l3ia.program.services.ProgGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ProgParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ProgGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ProgGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
			builder.put(grammarAccess.getActionsAccess().getAlternatives(), "rule__Actions__Alternatives");
			builder.put(grammarAccess.getMoteurAccess().getAlternatives(), "rule__Moteur__Alternatives");
			builder.put(grammarAccess.getRotateAccess().getAlternatives(), "rule__Rotate__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getConditionMotorAccess().getAlternatives(), "rule__ConditionMotor__Alternatives");
			builder.put(grammarAccess.getBooleanOperationsOnMotorsAccess().getAlternatives(), "rule__BooleanOperationsOnMotors__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getReferenceToColorAccess().getGroup(), "rule__ReferenceToColor__Group__0");
			builder.put(grammarAccess.getRobotAccess().getGroup(), "rule__Robot__Group__0");
			builder.put(grammarAccess.getTurnOnAccess().getGroup(), "rule__TurnOn__Group__0");
			builder.put(grammarAccess.getTurnOnAccess().getGroup_3(), "rule__TurnOn__Group_3__0");
			builder.put(grammarAccess.getTurnOnAccess().getGroup_3_1(), "rule__TurnOn__Group_3_1__0");
			builder.put(grammarAccess.getAccelerateAccess().getGroup(), "rule__Accelerate__Group__0");
			builder.put(grammarAccess.getAccelerateAccess().getGroup_3(), "rule__Accelerate__Group_3__0");
			builder.put(grammarAccess.getAccelerateAccess().getGroup_3_1(), "rule__Accelerate__Group_3_1__0");
			builder.put(grammarAccess.getAccelerateAccess().getGroup_4(), "rule__Accelerate__Group_4__0");
			builder.put(grammarAccess.getAccelerateAccess().getGroup_4_1(), "rule__Accelerate__Group_4_1__0");
			builder.put(grammarAccess.getLeftRotationAccess().getGroup(), "rule__LeftRotation__Group__0");
			builder.put(grammarAccess.getLeftRotationAccess().getGroup_5(), "rule__LeftRotation__Group_5__0");
			builder.put(grammarAccess.getLeftRotationAccess().getGroup_5_1(), "rule__LeftRotation__Group_5_1__0");
			builder.put(grammarAccess.getLeftRotationAccess().getGroup_6(), "rule__LeftRotation__Group_6__0");
			builder.put(grammarAccess.getLeftRotationAccess().getGroup_6_1(), "rule__LeftRotation__Group_6_1__0");
			builder.put(grammarAccess.getRightRotationAccess().getGroup(), "rule__RightRotation__Group__0");
			builder.put(grammarAccess.getRightRotationAccess().getGroup_5(), "rule__RightRotation__Group_5__0");
			builder.put(grammarAccess.getRightRotationAccess().getGroup_5_1(), "rule__RightRotation__Group_5_1__0");
			builder.put(grammarAccess.getRightRotationAccess().getGroup_6(), "rule__RightRotation__Group_6__0");
			builder.put(grammarAccess.getRightRotationAccess().getGroup_6_1(), "rule__RightRotation__Group_6_1__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getOnForRotationAccess().getGroup(), "rule__OnForRotation__Group__0");
			builder.put(grammarAccess.getStopAccess().getGroup(), "rule__Stop__Group__0");
			builder.put(grammarAccess.getLeftMotorAccess().getGroup(), "rule__LeftMotor__Group__0");
			builder.put(grammarAccess.getLeftMotorAccess().getGroup_2(), "rule__LeftMotor__Group_2__0");
			builder.put(grammarAccess.getLeftMotorAccess().getGroup_3(), "rule__LeftMotor__Group_3__0");
			builder.put(grammarAccess.getRightMotorAccess().getGroup(), "rule__RightMotor__Group__0");
			builder.put(grammarAccess.getRightMotorAccess().getGroup_2(), "rule__RightMotor__Group_2__0");
			builder.put(grammarAccess.getRightMotorAccess().getGroup_3(), "rule__RightMotor__Group_3__0");
			builder.put(grammarAccess.getInfraredSensorAccess().getGroup(), "rule__InfraredSensor__Group__0");
			builder.put(grammarAccess.getInfraredSensorAccess().getGroup_2(), "rule__InfraredSensor__Group_2__0");
			builder.put(grammarAccess.getGyroSensorAccess().getGroup(), "rule__GyroSensor__Group__0");
			builder.put(grammarAccess.getGyroSensorAccess().getGroup_2(), "rule__GyroSensor__Group_2__0");
			builder.put(grammarAccess.getGPSSensorAccess().getGroup(), "rule__GPSSensor__Group__0");
			builder.put(grammarAccess.getGPSSensorAccess().getGroup_2(), "rule__GPSSensor__Group_2__0");
			builder.put(grammarAccess.getLightSensorAccess().getGroup(), "rule__LightSensor__Group__0");
			builder.put(grammarAccess.getLightSensorAccess().getGroup_2(), "rule__LightSensor__Group_2__0");
			builder.put(grammarAccess.getUltrasonicSensorAccess().getGroup(), "rule__UltrasonicSensor__Group__0");
			builder.put(grammarAccess.getUltrasonicSensorAccess().getGroup_2(), "rule__UltrasonicSensor__Group_2__0");
			builder.put(grammarAccess.getColorSensorAccess().getGroup(), "rule__ColorSensor__Group__0");
			builder.put(grammarAccess.getColorSensorAccess().getGroup_2(), "rule__ColorSensor__Group_2__0");
			builder.put(grammarAccess.getPositionSensorAccess().getGroup(), "rule__PositionSensor__Group__0");
			builder.put(grammarAccess.getPositionSensorAccess().getGroup_2(), "rule__PositionSensor__Group_2__0");
			builder.put(grammarAccess.getIntensitySensorAccess().getGroup(), "rule__IntensitySensor__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMoveLeftAccess().getGroup(), "rule__MoveLeft__Group__0");
			builder.put(grammarAccess.getSetThankAccess().getGroup(), "rule__SetThank__Group__0");
			builder.put(grammarAccess.getGreatherThanMAccess().getGroup(), "rule__GreatherThanM__Group__0");
			builder.put(grammarAccess.getEqualMAccess().getGroup(), "rule__EqualM__Group__0");
			builder.put(grammarAccess.getIfMotorAccess().getGroup(), "rule__IfMotor__Group__0");
			builder.put(grammarAccess.getElseMotorAccess().getGroup(), "rule__ElseMotor__Group__0");
			builder.put(grammarAccess.getElseMotorAccess().getGroup_1(), "rule__ElseMotor__Group_1__0");
			builder.put(grammarAccess.getIfConditionAccess().getGroup(), "rule__IfCondition__Group__0");
			builder.put(grammarAccess.getIfConditionAccess().getGroup_7(), "rule__IfCondition__Group_7__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getStatement_ImplAccess().getGroup(), "rule__Statement_Impl__Group__0");
			builder.put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getComparison_ImplAccess().getGroup(), "rule__Comparison_Impl__Group__0");
			builder.put(grammarAccess.getSubstractionAccess().getGroup(), "rule__Substraction__Group__0");
			builder.put(grammarAccess.getGreaterThanAccess().getGroup(), "rule__GreaterThan__Group__0");
			builder.put(grammarAccess.getLowerThanAccess().getGroup(), "rule__LowerThan__Group__0");
			builder.put(grammarAccess.getEqualAccess().getGroup(), "rule__Equal__Group__0");
			builder.put(grammarAccess.getForLoopAccess().getGroup(), "rule__ForLoop__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_2(), "rule__Program__NameAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getRobotAssignment_3(), "rule__Program__RobotAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getVariableAssignment_4(), "rule__Program__VariableAssignment_4");
			builder.put(grammarAccess.getProgramAccess().getReferencetocolorAssignment_5(), "rule__Program__ReferencetocolorAssignment_5");
			builder.put(grammarAccess.getProgramAccess().getStatementAssignment_6(), "rule__Program__StatementAssignment_6");
			builder.put(grammarAccess.getReferenceToColorAccess().getNameAssignment_2(), "rule__ReferenceToColor__NameAssignment_2");
			builder.put(grammarAccess.getReferenceToColorAccess().getColorsensorAssignment_5(), "rule__ReferenceToColor__ColorsensorAssignment_5");
			builder.put(grammarAccess.getRobotAccess().getNameAssignment_1(), "rule__Robot__NameAssignment_1");
			builder.put(grammarAccess.getRobotAccess().getMoteurAssignment_3(), "rule__Robot__MoteurAssignment_3");
			builder.put(grammarAccess.getRobotAccess().getSensorAssignment_4(), "rule__Robot__SensorAssignment_4");
			builder.put(grammarAccess.getTurnOnAccess().getMoteurAssignment_2(), "rule__TurnOn__MoteurAssignment_2");
			builder.put(grammarAccess.getTurnOnAccess().getSpeedAssignment_3_2(), "rule__TurnOn__SpeedAssignment_3_2");
			builder.put(grammarAccess.getAccelerateAccess().getMoteurAssignment_2(), "rule__Accelerate__MoteurAssignment_2");
			builder.put(grammarAccess.getAccelerateAccess().getSpeedAssignment_3_2(), "rule__Accelerate__SpeedAssignment_3_2");
			builder.put(grammarAccess.getAccelerateAccess().getDurationAssignment_4_2(), "rule__Accelerate__DurationAssignment_4_2");
			builder.put(grammarAccess.getLeftRotationAccess().getLeftmotorAssignment_2(), "rule__LeftRotation__LeftmotorAssignment_2");
			builder.put(grammarAccess.getLeftRotationAccess().getRightmotorAssignment_4(), "rule__LeftRotation__RightmotorAssignment_4");
			builder.put(grammarAccess.getLeftRotationAccess().getAngleAssignment_5_2(), "rule__LeftRotation__AngleAssignment_5_2");
			builder.put(grammarAccess.getLeftRotationAccess().getDurationAssignment_6_2(), "rule__LeftRotation__DurationAssignment_6_2");
			builder.put(grammarAccess.getRightRotationAccess().getLeftmotorAssignment_2(), "rule__RightRotation__LeftmotorAssignment_2");
			builder.put(grammarAccess.getRightRotationAccess().getRightmotorAssignment_4(), "rule__RightRotation__RightmotorAssignment_4");
			builder.put(grammarAccess.getRightRotationAccess().getAngleAssignment_5_2(), "rule__RightRotation__AngleAssignment_5_2");
			builder.put(grammarAccess.getRightRotationAccess().getDurationAssignment_6_2(), "rule__RightRotation__DurationAssignment_6_2");
			builder.put(grammarAccess.getOnForRotationAccess().getMoteurAssignment_2(), "rule__OnForRotation__MoteurAssignment_2");
			builder.put(grammarAccess.getOnForRotationAccess().getSpeedAssignment_4(), "rule__OnForRotation__SpeedAssignment_4");
			builder.put(grammarAccess.getOnForRotationAccess().getAngleAssignment_6(), "rule__OnForRotation__AngleAssignment_6");
			builder.put(grammarAccess.getStopAccess().getMoteurAssignment_2(), "rule__Stop__MoteurAssignment_2");
			builder.put(grammarAccess.getLeftMotorAccess().getNameAssignment_1(), "rule__LeftMotor__NameAssignment_1");
			builder.put(grammarAccess.getLeftMotorAccess().getInitialSpeedAssignment_2_1(), "rule__LeftMotor__InitialSpeedAssignment_2_1");
			builder.put(grammarAccess.getLeftMotorAccess().getPortAssignment_3_1(), "rule__LeftMotor__PortAssignment_3_1");
			builder.put(grammarAccess.getRightMotorAccess().getNameAssignment_1(), "rule__RightMotor__NameAssignment_1");
			builder.put(grammarAccess.getRightMotorAccess().getInitialSpeedAssignment_2_1(), "rule__RightMotor__InitialSpeedAssignment_2_1");
			builder.put(grammarAccess.getRightMotorAccess().getPortAssignment_3_1(), "rule__RightMotor__PortAssignment_3_1");
			builder.put(grammarAccess.getInfraredSensorAccess().getNameAssignment_1(), "rule__InfraredSensor__NameAssignment_1");
			builder.put(grammarAccess.getInfraredSensorAccess().getSensorPortAssignment_2_1(), "rule__InfraredSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getGyroSensorAccess().getNameAssignment_1(), "rule__GyroSensor__NameAssignment_1");
			builder.put(grammarAccess.getGyroSensorAccess().getSensorPortAssignment_2_1(), "rule__GyroSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getGPSSensorAccess().getNameAssignment_1(), "rule__GPSSensor__NameAssignment_1");
			builder.put(grammarAccess.getGPSSensorAccess().getSensorPortAssignment_2_1(), "rule__GPSSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getLightSensorAccess().getNameAssignment_1(), "rule__LightSensor__NameAssignment_1");
			builder.put(grammarAccess.getLightSensorAccess().getSensorPortAssignment_2_1(), "rule__LightSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getUltrasonicSensorAccess().getNameAssignment_1(), "rule__UltrasonicSensor__NameAssignment_1");
			builder.put(grammarAccess.getUltrasonicSensorAccess().getSensorPortAssignment_2_1(), "rule__UltrasonicSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getColorSensorAccess().getNameAssignment_1(), "rule__ColorSensor__NameAssignment_1");
			builder.put(grammarAccess.getColorSensorAccess().getSensorPortAssignment_2_1(), "rule__ColorSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getPositionSensorAccess().getNameAssignment_1(), "rule__PositionSensor__NameAssignment_1");
			builder.put(grammarAccess.getPositionSensorAccess().getSensorPortAssignment_2_1(), "rule__PositionSensor__SensorPortAssignment_2_1");
			builder.put(grammarAccess.getIntensitySensorAccess().getNameAssignment_1(), "rule__IntensitySensor__NameAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getLeftmotorAssignment_2(), "rule__Move__LeftmotorAssignment_2");
			builder.put(grammarAccess.getMoveAccess().getRightmotorAssignment_4(), "rule__Move__RightmotorAssignment_4");
			builder.put(grammarAccess.getMoveAccess().getSpeedAssignment_6(), "rule__Move__SpeedAssignment_6");
			builder.put(grammarAccess.getMoveLeftAccess().getLeftmotorAssignment_2(), "rule__MoveLeft__LeftmotorAssignment_2");
			builder.put(grammarAccess.getMoveLeftAccess().getRightmotorAssignment_4(), "rule__MoveLeft__RightmotorAssignment_4");
			builder.put(grammarAccess.getMoveLeftAccess().getSpeedAssignment_6(), "rule__MoveLeft__SpeedAssignment_6");
			builder.put(grammarAccess.getSetThankAccess().getLeftmotorAssignment_2(), "rule__SetThank__LeftmotorAssignment_2");
			builder.put(grammarAccess.getSetThankAccess().getRightmotorAssignment_4(), "rule__SetThank__RightmotorAssignment_4");
			builder.put(grammarAccess.getGreatherThanMAccess().getLeftCAssignment_1(), "rule__GreatherThanM__LeftCAssignment_1");
			builder.put(grammarAccess.getGreatherThanMAccess().getRightCAssignment_3(), "rule__GreatherThanM__RightCAssignment_3");
			builder.put(grammarAccess.getEqualMAccess().getLeftCAssignment_1(), "rule__EqualM__LeftCAssignment_1");
			builder.put(grammarAccess.getEqualMAccess().getRightCAssignment_3(), "rule__EqualM__RightCAssignment_3");
			builder.put(grammarAccess.getIfMotorAccess().getBoolMAssignment_3(), "rule__IfMotor__BoolMAssignment_3");
			builder.put(grammarAccess.getIfMotorAccess().getStatementAssignment_6(), "rule__IfMotor__StatementAssignment_6");
			builder.put(grammarAccess.getIfMotorAccess().getElsemotorAssignment_8(), "rule__IfMotor__ElsemotorAssignment_8");
			builder.put(grammarAccess.getElseMotorAccess().getStatementAssignment_1_2(), "rule__ElseMotor__StatementAssignment_1_2");
			builder.put(grammarAccess.getColorRefAccess().getReferencetocolorAssignment(), "rule__ColorRef__ReferencetocolorAssignment");
			builder.put(grammarAccess.getIfConditionAccess().getExpressionAssignment_2(), "rule__IfCondition__ExpressionAssignment_2");
			builder.put(grammarAccess.getIfConditionAccess().getStatementAssignment_5(), "rule__IfCondition__StatementAssignment_5");
			builder.put(grammarAccess.getIfConditionAccess().getStatementAssignment_7_2(), "rule__IfCondition__StatementAssignment_7_2");
			builder.put(grammarAccess.getVariableAccess().getIsConstAssignment_1(), "rule__Variable__IsConstAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_3(), "rule__Variable__NameAssignment_3");
			builder.put(grammarAccess.getVariableAccess().getInitialValueAssignment_5(), "rule__Variable__InitialValueAssignment_5");
			builder.put(grammarAccess.getWhileLoopAccess().getExpressionAssignment_1(), "rule__WhileLoop__ExpressionAssignment_1");
			builder.put(grammarAccess.getWhileLoopAccess().getStatementAssignment_3(), "rule__WhileLoop__StatementAssignment_3");
			builder.put(grammarAccess.getVariableRefAccess().getVariableAssignment(), "rule__VariableRef__VariableAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getLeftAssignment_1(), "rule__Assignment__LeftAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getRightAssignment_3(), "rule__Assignment__RightAssignment_3");
			builder.put(grammarAccess.getComparison_ImplAccess().getLeftAssignment_1(), "rule__Comparison_Impl__LeftAssignment_1");
			builder.put(grammarAccess.getComparison_ImplAccess().getRightAssignment_2(), "rule__Comparison_Impl__RightAssignment_2");
			builder.put(grammarAccess.getSubstractionAccess().getLeftAssignment_1(), "rule__Substraction__LeftAssignment_1");
			builder.put(grammarAccess.getSubstractionAccess().getRightAssignment_3(), "rule__Substraction__RightAssignment_3");
			builder.put(grammarAccess.getGreaterThanAccess().getLeftAssignment_1(), "rule__GreaterThan__LeftAssignment_1");
			builder.put(grammarAccess.getGreaterThanAccess().getRightAssignment_3(), "rule__GreaterThan__RightAssignment_3");
			builder.put(grammarAccess.getLowerThanAccess().getLeftAssignment_1(), "rule__LowerThan__LeftAssignment_1");
			builder.put(grammarAccess.getLowerThanAccess().getRightAssignment_3(), "rule__LowerThan__RightAssignment_3");
			builder.put(grammarAccess.getEqualAccess().getLeftAssignment_1(), "rule__Equal__LeftAssignment_1");
			builder.put(grammarAccess.getEqualAccess().getRightAssignment_3(), "rule__Equal__RightAssignment_3");
			builder.put(grammarAccess.getForLoopAccess().getExpressionAssignment_1(), "rule__ForLoop__ExpressionAssignment_1");
			builder.put(grammarAccess.getForLoopAccess().getStatementAssignment_3(), "rule__ForLoop__StatementAssignment_3");
			builder.put(grammarAccess.getAdditionAccess().getLeftAssignment_1(), "rule__Addition__LeftAssignment_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_3(), "rule__Addition__RightAssignment_3");
			builder.put(grammarAccess.getMultiplicationAccess().getLeftAssignment_1(), "rule__Multiplication__LeftAssignment_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_3(), "rule__Multiplication__RightAssignment_3");
			builder.put(grammarAccess.getDivisionAccess().getLeftAssignment_1(), "rule__Division__LeftAssignment_1");
			builder.put(grammarAccess.getDivisionAccess().getRightAssignment_3(), "rule__Division__RightAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ProgGrammarAccess grammarAccess;

	@Override
	protected InternalProgParser createParser() {
		InternalProgParser result = new InternalProgParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ProgGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ProgGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
