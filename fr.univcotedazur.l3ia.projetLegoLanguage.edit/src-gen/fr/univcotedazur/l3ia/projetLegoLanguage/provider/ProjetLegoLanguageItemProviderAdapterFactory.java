/**
 */
package fr.univcotedazur.l3ia.projetLegoLanguage.provider;

import fr.univcotedazur.l3ia.projetLegoLanguage.util.ProjetLegoLanguageAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ProjetLegoLanguageItemProviderAdapterFactory extends ProjetLegoLanguageAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProjetLegoLanguageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Lego} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LegoItemProvider legoItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Lego}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLegoAdapter() {
		if (legoItemProvider == null) {
			legoItemProvider = new LegoItemProvider(this);
		}

		return legoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Robot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RobotItemProvider robotItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Robot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobotAdapter() {
		if (robotItemProvider == null) {
			robotItemProvider = new RobotItemProvider(this);
		}

		return robotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Motor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorItemProvider motorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Motor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorAdapter() {
		if (motorItemProvider == null) {
			motorItemProvider = new MotorItemProvider(this);
		}

		return motorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.LeftMotor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftMotorItemProvider leftMotorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.LeftMotor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeftMotorAdapter() {
		if (leftMotorItemProvider == null) {
			leftMotorItemProvider = new LeftMotorItemProvider(this);
		}

		return leftMotorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.RightMotor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightMotorItemProvider rightMotorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.RightMotor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightMotorAdapter() {
		if (rightMotorItemProvider == null) {
			rightMotorItemProvider = new RightMotorItemProvider(this);
		}

		return rightMotorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.ColorSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorSensorItemProvider colorSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.ColorSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorSensorAdapter() {
		if (colorSensorItemProvider == null) {
			colorSensorItemProvider = new ColorSensorItemProvider(this);
		}

		return colorSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.PositionSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionSensorItemProvider positionSensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.PositionSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionSensorAdapter() {
		if (positionSensorItemProvider == null) {
			positionSensorItemProvider = new PositionSensorItemProvider(this);
		}

		return positionSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Go} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoItemProvider goItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Go}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoAdapter() {
		if (goItemProvider == null) {
			goItemProvider = new GoItemProvider(this);
		}

		return goItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightItemProvider rightItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightAdapter() {
		if (rightItemProvider == null) {
			rightItemProvider = new RightItemProvider(this);
		}

		return rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Left} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftItemProvider leftItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Left}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeftAdapter() {
		if (leftItemProvider == null) {
			leftItemProvider = new LeftItemProvider(this);
		}

		return leftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Continue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinueItemProvider continueItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Continue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinueAdapter() {
		if (continueItemProvider == null) {
			continueItemProvider = new ContinueItemProvider(this);
		}

		return continueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Back} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackItemProvider backItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Back}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackAdapter() {
		if (backItemProvider == null) {
			backItemProvider = new BackItemProvider(this);
		}

		return backItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.ShutDown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShutDownItemProvider shutDownItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.ShutDown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShutDownAdapter() {
		if (shutDownItemProvider == null) {
			shutDownItemProvider = new ShutDownItemProvider(this);
		}

		return shutDownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Down} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DownItemProvider downItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Down}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDownAdapter() {
		if (downItemProvider == null) {
			downItemProvider = new DownItemProvider(this);
		}

		return downItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.univcotedazur.l3ia.projetLegoLanguage.Rotate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotateItemProvider rotateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.univcotedazur.l3ia.projetLegoLanguage.Rotate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotateAdapter() {
		if (rotateItemProvider == null) {
			rotateItemProvider = new RotateItemProvider(this);
		}

		return rotateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (legoItemProvider != null)
			legoItemProvider.dispose();
		if (robotItemProvider != null)
			robotItemProvider.dispose();
		if (motorItemProvider != null)
			motorItemProvider.dispose();
		if (leftMotorItemProvider != null)
			leftMotorItemProvider.dispose();
		if (rightMotorItemProvider != null)
			rightMotorItemProvider.dispose();
		if (sensorItemProvider != null)
			sensorItemProvider.dispose();
		if (colorSensorItemProvider != null)
			colorSensorItemProvider.dispose();
		if (positionSensorItemProvider != null)
			positionSensorItemProvider.dispose();
		if (portItemProvider != null)
			portItemProvider.dispose();
		if (goItemProvider != null)
			goItemProvider.dispose();
		if (rightItemProvider != null)
			rightItemProvider.dispose();
		if (leftItemProvider != null)
			leftItemProvider.dispose();
		if (continueItemProvider != null)
			continueItemProvider.dispose();
		if (backItemProvider != null)
			backItemProvider.dispose();
		if (shutDownItemProvider != null)
			shutDownItemProvider.dispose();
		if (downItemProvider != null)
			downItemProvider.dispose();
		if (rotateItemProvider != null)
			rotateItemProvider.dispose();
	}

}
