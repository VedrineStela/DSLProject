/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.program.serializer;

import com.google.inject.Inject;
import fr.univcotedazur.l3ia.program.services.ProgGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ProgSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ProgGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Accelerate___SecondsKeyword_4_1_0_EqualsSignKeyword_4_1_1__q;
	protected AbstractElementAlias match_Accelerate___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q;
	protected AbstractElementAlias match_IfCondition___ElseKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q;
	protected AbstractElementAlias match_LeftRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q;
	protected AbstractElementAlias match_LeftRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q;
	protected AbstractElementAlias match_RightRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q;
	protected AbstractElementAlias match_RightRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q;
	protected AbstractElementAlias match_TurnOn___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ProgGrammarAccess) access;
		match_Accelerate___SecondsKeyword_4_1_0_EqualsSignKeyword_4_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAccelerateAccess().getSecondsKeyword_4_1_0()), new TokenAlias(false, false, grammarAccess.getAccelerateAccess().getEqualsSignKeyword_4_1_1()));
		match_Accelerate___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAccelerateAccess().getSpeedKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getAccelerateAccess().getEqualsSignKeyword_3_1_1()));
		match_IfCondition___ElseKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfConditionAccess().getElseKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getIfConditionAccess().getLeftCurlyBracketKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getIfConditionAccess().getRightCurlyBracketKeyword_7_3()));
		match_LeftRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLeftRotationAccess().getAngleKeyword_5_1_0()), new TokenAlias(false, false, grammarAccess.getLeftRotationAccess().getEqualsSignKeyword_5_1_1()));
		match_LeftRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLeftRotationAccess().getSecondsKeyword_6_1_0()), new TokenAlias(false, false, grammarAccess.getLeftRotationAccess().getEqualsSignKeyword_6_1_1()));
		match_RightRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRightRotationAccess().getAngleKeyword_5_1_0()), new TokenAlias(false, false, grammarAccess.getRightRotationAccess().getEqualsSignKeyword_5_1_1()));
		match_RightRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRightRotationAccess().getSecondsKeyword_6_1_0()), new TokenAlias(false, false, grammarAccess.getRightRotationAccess().getEqualsSignKeyword_6_1_1()));
		match_TurnOn___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTurnOnAccess().getSpeedKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getTurnOnAccess().getEqualsSignKeyword_3_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Accelerate___SecondsKeyword_4_1_0_EqualsSignKeyword_4_1_1__q.equals(syntax))
				emit_Accelerate___SecondsKeyword_4_1_0_EqualsSignKeyword_4_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Accelerate___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q.equals(syntax))
				emit_Accelerate___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfCondition___ElseKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q.equals(syntax))
				emit_IfCondition___ElseKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LeftRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q.equals(syntax))
				emit_LeftRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LeftRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q.equals(syntax))
				emit_LeftRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RightRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q.equals(syntax))
				emit_RightRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RightRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q.equals(syntax))
				emit_RightRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TurnOn___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q.equals(syntax))
				emit_TurnOn___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('seconds' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     moteur=[Moteur|FQN] ',' (ambiguity) duration=INT
	 *     speed=INT ',' (ambiguity) duration=INT
	 */
	protected void emit_Accelerate___SecondsKeyword_4_1_0_EqualsSignKeyword_4_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('speed' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     moteur=[Moteur|FQN] ',' (ambiguity) speed=INT
	 */
	protected void emit_Accelerate___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('else' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression ')' '{' '}' (ambiguity) (rule end)
	 *     statement+=Statement '}' (ambiguity) (rule end)
	 */
	protected void emit_IfCondition___ElseKeyword_7_0_LeftCurlyBracketKeyword_7_1_RightCurlyBracketKeyword_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('angle' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     rightmotor=[RightMotor|FQN] ',' (ambiguity) angle=INT
	 */
	protected void emit_LeftRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('seconds' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     angle=INT ',' (ambiguity) duration=INT
	 *     rightmotor=[RightMotor|FQN] ',' (ambiguity) duration=INT
	 */
	protected void emit_LeftRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('angle' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     rightmotor=[RightMotor|FQN] ',' (ambiguity) angle=INT
	 */
	protected void emit_RightRotation___AngleKeyword_5_1_0_EqualsSignKeyword_5_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('seconds' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     angle=INT ',' (ambiguity) duration=INT
	 *     rightmotor=[RightMotor|FQN] ',' (ambiguity) duration=INT
	 */
	protected void emit_RightRotation___SecondsKeyword_6_1_0_EqualsSignKeyword_6_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('speed' '=')?
	 *
	 * This ambiguous syntax occurs at:
	 *     moteur=[Moteur|FQN] ',' (ambiguity) speed=INT
	 */
	protected void emit_TurnOn___SpeedKeyword_3_1_0_EqualsSignKeyword_3_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
