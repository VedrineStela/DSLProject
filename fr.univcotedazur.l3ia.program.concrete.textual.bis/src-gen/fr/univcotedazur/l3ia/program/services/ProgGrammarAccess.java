/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.program.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProgGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cRobotAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRobotRobotParserRuleCall_3_0 = (RuleCall)cRobotAssignment_3.eContents().get(0);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableVariableParserRuleCall_4_0 = (RuleCall)cVariableAssignment_4.eContents().get(0);
		private final Assignment cReferencetocolorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReferencetocolorReferenceToColorParserRuleCall_5_0 = (RuleCall)cReferencetocolorAssignment_5.eContents().get(0);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		
		//Program returns Program:
		//    {Program}
		//    'Program'
		//      name = ID
		//        (robot+=Robot)*
		//        (variable+=Variable)*
		//        (referencetocolor+=ReferenceToColor)*
		//        (statement+=Statement)*
		//        //(statement+=Statement(';'statement+=Statement)*)?
		//        //'statement' '{'
		//        // statement+=Statement ( ","
		//        // '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'Program'
		//  name = ID
		//    (robot+=Robot)*
		//    (variable+=Variable)*
		//    (referencetocolor+=ReferenceToColor)*
		//    (statement+=Statement)*
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(robot+=Robot)*
		public Assignment getRobotAssignment_3() { return cRobotAssignment_3; }
		
		//Robot
		public RuleCall getRobotRobotParserRuleCall_3_0() { return cRobotRobotParserRuleCall_3_0; }
		
		//(variable+=Variable)*
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_4_0() { return cVariableVariableParserRuleCall_4_0; }
		
		//(referencetocolor+=ReferenceToColor)*
		public Assignment getReferencetocolorAssignment_5() { return cReferencetocolorAssignment_5; }
		
		//ReferenceToColor
		public RuleCall getReferencetocolorReferenceToColorParserRuleCall_5_0() { return cReferencetocolorReferenceToColorParserRuleCall_5_0; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_6_0() { return cStatementStatementParserRuleCall_6_0; }
	}
	public class ReferenceToColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.ReferenceToColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceToColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColorsensorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cColorsensorColorSensorCrossReference_5_0 = (CrossReference)cColorsensorAssignment_5.eContents().get(0);
		private final RuleCall cColorsensorColorSensorFQNParserRuleCall_5_0_1 = (RuleCall)cColorsensorColorSensorCrossReference_5_0.eContents().get(1);
		private final Keyword cColor_nameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ReferenceToColor returns ReferenceToColor:
		//    {ReferenceToColor}
		//    'ref' name =ID
		//    '='
		//    '('
		//    (colorsensor = [ColorSensor | FQN])
		//    'color_name'
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceToColor}
		//'ref' name =ID
		//'='
		//'('
		//(colorsensor = [ColorSensor | FQN])
		//'color_name'
		//')'
		public Group getGroup() { return cGroup; }
		
		//{ReferenceToColor}
		public Action getReferenceToColorAction_0() { return cReferenceToColorAction_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//name =ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(colorsensor = [ColorSensor | FQN])
		public Assignment getColorsensorAssignment_5() { return cColorsensorAssignment_5; }
		
		//[ColorSensor | FQN]
		public CrossReference getColorsensorColorSensorCrossReference_5_0() { return cColorsensorColorSensorCrossReference_5_0; }
		
		//FQN
		public RuleCall getColorsensorColorSensorFQNParserRuleCall_5_0_1() { return cColorsensorColorSensorFQNParserRuleCall_5_0_1; }
		
		//'color_name'
		public Keyword getColor_nameKeyword_6() { return cColor_nameKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMoteurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMoteurMoteurParserRuleCall_3_0 = (RuleCall)cMoteurAssignment_3.eContents().get(0);
		private final Assignment cSensorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSensorSensorParserRuleCall_4_0 = (RuleCall)cSensorAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Robot returns Robot:
		//    'Robot'
		//    name = ID
		//    '{'
		//    (moteur+=Moteur)*
		//    (sensor+=Sensor)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot'
		//name = ID
		//'{'
		//(moteur+=Moteur)*
		//(sensor+=Sensor)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(moteur+=Moteur)*
		public Assignment getMoteurAssignment_3() { return cMoteurAssignment_3; }
		
		//Moteur
		public RuleCall getMoteurMoteurParserRuleCall_3_0() { return cMoteurMoteurParserRuleCall_3_0; }
		
		//(sensor+=Sensor)*
		public Assignment getSensorAssignment_4() { return cSensorAssignment_4; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_4_0() { return cSensorSensorParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntensitySensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPositionSensorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInfraredSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGyroSensorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGPSSensorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLightSensorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cUltrasonicSensorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Sensor returns Sensor:
		//    IntensitySensor | ColorSensor | PositionSensor | InfraredSensor | GyroSensor | GPSSensor | LightSensor | UltrasonicSensor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntensitySensor | ColorSensor | PositionSensor | InfraredSensor | GyroSensor | GPSSensor | LightSensor | UltrasonicSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntensitySensor
		public RuleCall getIntensitySensorParserRuleCall_0() { return cIntensitySensorParserRuleCall_0; }
		
		//ColorSensor
		public RuleCall getColorSensorParserRuleCall_1() { return cColorSensorParserRuleCall_1; }
		
		//PositionSensor
		public RuleCall getPositionSensorParserRuleCall_2() { return cPositionSensorParserRuleCall_2; }
		
		//InfraredSensor
		public RuleCall getInfraredSensorParserRuleCall_3() { return cInfraredSensorParserRuleCall_3; }
		
		//GyroSensor
		public RuleCall getGyroSensorParserRuleCall_4() { return cGyroSensorParserRuleCall_4; }
		
		//GPSSensor
		public RuleCall getGPSSensorParserRuleCall_5() { return cGPSSensorParserRuleCall_5; }
		
		//LightSensor
		public RuleCall getLightSensorParserRuleCall_6() { return cLightSensorParserRuleCall_6; }
		
		//UltrasonicSensor
		public RuleCall getUltrasonicSensorParserRuleCall_7() { return cUltrasonicSensorParserRuleCall_7; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOnForRotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAccelerateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTurnOnParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Actions returns Actions:
		//    Stop | OnForRotation | Accelerate | TurnOn
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Stop | OnForRotation | Accelerate | TurnOn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Stop
		public RuleCall getStopParserRuleCall_0() { return cStopParserRuleCall_0; }
		
		//OnForRotation
		public RuleCall getOnForRotationParserRuleCall_1() { return cOnForRotationParserRuleCall_1; }
		
		//Accelerate
		public RuleCall getAccelerateParserRuleCall_2() { return cAccelerateParserRuleCall_2; }
		
		//TurnOn
		public RuleCall getTurnOnParserRuleCall_3() { return cTurnOnParserRuleCall_3; }
	}
	public class MoteurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Moteur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftMotorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightMotorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Moteur returns Moteur:
		//    LeftMotor |RightMotor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftMotor |RightMotor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftMotor
		public RuleCall getLeftMotorParserRuleCall_0() { return cLeftMotorParserRuleCall_0; }
		
		//RightMotor
		public RuleCall getRightMotorParserRuleCall_1() { return cRightMotorParserRuleCall_1; }
	}
	public class TurnOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.TurnOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMoteurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMoteurMoteurCrossReference_2_0 = (CrossReference)cMoteurAssignment_2.eContents().get(0);
		private final RuleCall cMoteurMoteurFQNParserRuleCall_2_0_1 = (RuleCall)cMoteurMoteurCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSpeedKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSpeedAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_3_2_0 = (RuleCall)cSpeedAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TurnOn returns TurnOn:
		//    'turnOn'
		//    '('
		//     moteur =[Moteur | FQN] //STRING
		//     (',' ('speed' '=')? speed = INT)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'turnOn'
		//'('
		// moteur =[Moteur | FQN] //STRING
		// (',' ('speed' '=')? speed = INT)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'turnOn'
		public Keyword getTurnOnKeyword_0() { return cTurnOnKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//moteur =[Moteur | FQN]
		public Assignment getMoteurAssignment_2() { return cMoteurAssignment_2; }
		
		//[Moteur | FQN]
		public CrossReference getMoteurMoteurCrossReference_2_0() { return cMoteurMoteurCrossReference_2_0; }
		
		//FQN
		public RuleCall getMoteurMoteurFQNParserRuleCall_2_0_1() { return cMoteurMoteurFQNParserRuleCall_2_0_1; }
		
		////STRING
		//    (',' ('speed' '=')? speed = INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//('speed' '=')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'speed'
		public Keyword getSpeedKeyword_3_1_0() { return cSpeedKeyword_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//speed = INT
		public Assignment getSpeedAssignment_3_2() { return cSpeedAssignment_3_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_3_2_0() { return cSpeedINTTerminalRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AccelerateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Accelerate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccelerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMoteurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMoteurMoteurCrossReference_2_0 = (CrossReference)cMoteurAssignment_2.eContents().get(0);
		private final RuleCall cMoteurMoteurFQNParserRuleCall_2_0_1 = (RuleCall)cMoteurMoteurCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSpeedKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSpeedAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_3_2_0 = (RuleCall)cSpeedAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cSecondsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cDurationAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDurationINTTerminalRuleCall_4_2_0 = (RuleCall)cDurationAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Accelerate returns Accelerate:
		//    'accelerate'
		//    '('
		//    moteur = [Moteur | FQN] //STRING
		//    (',' ('speed' '=')? speed = INT)?
		//    (',' ('seconds' '=')? duration=INT)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'accelerate'
		//'('
		//moteur = [Moteur | FQN] //STRING
		//(',' ('speed' '=')? speed = INT)?
		//(',' ('seconds' '=')? duration=INT)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'accelerate'
		public Keyword getAccelerateKeyword_0() { return cAccelerateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//moteur = [Moteur | FQN]
		public Assignment getMoteurAssignment_2() { return cMoteurAssignment_2; }
		
		//[Moteur | FQN]
		public CrossReference getMoteurMoteurCrossReference_2_0() { return cMoteurMoteurCrossReference_2_0; }
		
		//FQN
		public RuleCall getMoteurMoteurFQNParserRuleCall_2_0_1() { return cMoteurMoteurFQNParserRuleCall_2_0_1; }
		
		////STRING
		//   (',' ('speed' '=')? speed = INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//('speed' '=')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'speed'
		public Keyword getSpeedKeyword_3_1_0() { return cSpeedKeyword_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//speed = INT
		public Assignment getSpeedAssignment_3_2() { return cSpeedAssignment_3_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_3_2_0() { return cSpeedINTTerminalRuleCall_3_2_0; }
		
		//(',' ('seconds' '=')? duration=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//('seconds' '=')?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'seconds'
		public Keyword getSecondsKeyword_4_1_0() { return cSecondsKeyword_4_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1_1() { return cEqualsSignKeyword_4_1_1; }
		
		//duration=INT
		public Assignment getDurationAssignment_4_2() { return cDurationAssignment_4_2; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_4_2_0() { return cDurationINTTerminalRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Rotate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftRotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightRotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rotate returns Rotate:
		//    LeftRotation | RightRotation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftRotation | RightRotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftRotation
		public RuleCall getLeftRotationParserRuleCall_0() { return cLeftRotationParserRuleCall_0; }
		
		//RightRotation
		public RuleCall getRightRotationParserRuleCall_1() { return cRightRotationParserRuleCall_1; }
	}
	public class LeftRotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.LeftRotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftmotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftmotorLeftMotorCrossReference_2_0 = (CrossReference)cLeftmotorAssignment_2.eContents().get(0);
		private final RuleCall cLeftmotorLeftMotorFQNParserRuleCall_2_0_1 = (RuleCall)cLeftmotorLeftMotorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightmotorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightmotorRightMotorCrossReference_4_0 = (CrossReference)cRightmotorAssignment_4.eContents().get(0);
		private final RuleCall cRightmotorRightMotorFQNParserRuleCall_4_0_1 = (RuleCall)cRightmotorRightMotorCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cAngleKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cAngleAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_5_2_0 = (RuleCall)cAngleAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cSecondsKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cDurationAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDurationINTTerminalRuleCall_6_2_0 = (RuleCall)cDurationAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LeftRotation returns LeftRotation:
		//    'turnLeft'
		//    '('
		//    leftmotor = [LeftMotor | FQN]
		//    ','
		//    rightmotor = [RightMotor | FQN]
		//    (',' ('angle' '=')? angle = INT)?
		//    (',' ('seconds' '=')? duration=INT)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'turnLeft'
		//'('
		//leftmotor = [LeftMotor | FQN]
		//','
		//rightmotor = [RightMotor | FQN]
		//(',' ('angle' '=')? angle = INT)?
		//(',' ('seconds' '=')? duration=INT)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'turnLeft'
		public Keyword getTurnLeftKeyword_0() { return cTurnLeftKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftmotor = [LeftMotor | FQN]
		public Assignment getLeftmotorAssignment_2() { return cLeftmotorAssignment_2; }
		
		//[LeftMotor | FQN]
		public CrossReference getLeftmotorLeftMotorCrossReference_2_0() { return cLeftmotorLeftMotorCrossReference_2_0; }
		
		//FQN
		public RuleCall getLeftmotorLeftMotorFQNParserRuleCall_2_0_1() { return cLeftmotorLeftMotorFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightmotor = [RightMotor | FQN]
		public Assignment getRightmotorAssignment_4() { return cRightmotorAssignment_4; }
		
		//[RightMotor | FQN]
		public CrossReference getRightmotorRightMotorCrossReference_4_0() { return cRightmotorRightMotorCrossReference_4_0; }
		
		//FQN
		public RuleCall getRightmotorRightMotorFQNParserRuleCall_4_0_1() { return cRightmotorRightMotorFQNParserRuleCall_4_0_1; }
		
		//(',' ('angle' '=')? angle = INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//('angle' '=')?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'angle'
		public Keyword getAngleKeyword_5_1_0() { return cAngleKeyword_5_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1_1() { return cEqualsSignKeyword_5_1_1; }
		
		//angle = INT
		public Assignment getAngleAssignment_5_2() { return cAngleAssignment_5_2; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_5_2_0() { return cAngleINTTerminalRuleCall_5_2_0; }
		
		//(',' ('seconds' '=')? duration=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//('seconds' '=')?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'seconds'
		public Keyword getSecondsKeyword_6_1_0() { return cSecondsKeyword_6_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1_1() { return cEqualsSignKeyword_6_1_1; }
		
		//duration=INT
		public Assignment getDurationAssignment_6_2() { return cDurationAssignment_6_2; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_6_2_0() { return cDurationINTTerminalRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class RightRotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.RightRotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftmotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftmotorLeftMotorCrossReference_2_0 = (CrossReference)cLeftmotorAssignment_2.eContents().get(0);
		private final RuleCall cLeftmotorLeftMotorFQNParserRuleCall_2_0_1 = (RuleCall)cLeftmotorLeftMotorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightmotorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightmotorRightMotorCrossReference_4_0 = (CrossReference)cRightmotorAssignment_4.eContents().get(0);
		private final RuleCall cRightmotorRightMotorFQNParserRuleCall_4_0_1 = (RuleCall)cRightmotorRightMotorCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cAngleKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cAngleAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_5_2_0 = (RuleCall)cAngleAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cSecondsKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cDurationAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDurationINTTerminalRuleCall_6_2_0 = (RuleCall)cDurationAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RightRotation returns RightRotation:
		//    'turnRight'
		//    '('
		//    leftmotor = [LeftMotor | FQN]
		//    ','
		//    rightmotor = [RightMotor | FQN]
		//    (',' ('angle' '=')? angle = INT)?
		//    (',' ('seconds' '=')? duration=INT)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'turnRight'
		//'('
		//leftmotor = [LeftMotor | FQN]
		//','
		//rightmotor = [RightMotor | FQN]
		//(',' ('angle' '=')? angle = INT)?
		//(',' ('seconds' '=')? duration=INT)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'turnRight'
		public Keyword getTurnRightKeyword_0() { return cTurnRightKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftmotor = [LeftMotor | FQN]
		public Assignment getLeftmotorAssignment_2() { return cLeftmotorAssignment_2; }
		
		//[LeftMotor | FQN]
		public CrossReference getLeftmotorLeftMotorCrossReference_2_0() { return cLeftmotorLeftMotorCrossReference_2_0; }
		
		//FQN
		public RuleCall getLeftmotorLeftMotorFQNParserRuleCall_2_0_1() { return cLeftmotorLeftMotorFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightmotor = [RightMotor | FQN]
		public Assignment getRightmotorAssignment_4() { return cRightmotorAssignment_4; }
		
		//[RightMotor | FQN]
		public CrossReference getRightmotorRightMotorCrossReference_4_0() { return cRightmotorRightMotorCrossReference_4_0; }
		
		//FQN
		public RuleCall getRightmotorRightMotorFQNParserRuleCall_4_0_1() { return cRightmotorRightMotorFQNParserRuleCall_4_0_1; }
		
		//(',' ('angle' '=')? angle = INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//('angle' '=')?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'angle'
		public Keyword getAngleKeyword_5_1_0() { return cAngleKeyword_5_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1_1() { return cEqualsSignKeyword_5_1_1; }
		
		//angle = INT
		public Assignment getAngleAssignment_5_2() { return cAngleAssignment_5_2; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_5_2_0() { return cAngleINTTerminalRuleCall_5_2_0; }
		
		//(',' ('seconds' '=')? duration=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//('seconds' '=')?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'seconds'
		public Keyword getSecondsKeyword_6_1_0() { return cSecondsKeyword_6_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1_1() { return cEqualsSignKeyword_6_1_1; }
		
		//duration=INT
		public Assignment getDurationAssignment_6_2() { return cDurationAssignment_6_2; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_6_2_0() { return cDurationINTTerminalRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///*Rotate returns Rotate:
		//    'rotate'
		//    '('
		//    moteur = [Moteur | FQN]
		//    (',' ('angle' '=')? angle = INT)?
		//    ')'
		//;"""*/
		//FQN: //Fully Qualified Name
		//    ID('.'ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////Fully Qualified Name
		//   ID('.'ID)*
		public Group getGroup() { return cGroup; }
		
		////Fully Qualified Name
		//   ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.'ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class OnForRotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.OnForRotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnForRotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMoteurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMoteurMoteurCrossReference_2_0 = (CrossReference)cMoteurAssignment_2.eContents().get(0);
		private final RuleCall cMoteurMoteurFQNParserRuleCall_2_0_1 = (RuleCall)cMoteurMoteurCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpeedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpeedINTTerminalRuleCall_4_0 = (RuleCall)cSpeedAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAngleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAngleINTTerminalRuleCall_6_0 = (RuleCall)cAngleAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OnForRotation returns OnForRotation:
		//    'onForRotation'
		//    '('
		//    moteur =[Moteur | FQN] //STRING
		//    ','
		//    speed=INT
		//    ','
		//    angle=INT
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'onForRotation'
		//'('
		//moteur =[Moteur | FQN] //STRING
		//','
		//speed=INT
		//','
		//angle=INT
		//')'
		public Group getGroup() { return cGroup; }
		
		//'onForRotation'
		public Keyword getOnForRotationKeyword_0() { return cOnForRotationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//moteur =[Moteur | FQN]
		public Assignment getMoteurAssignment_2() { return cMoteurAssignment_2; }
		
		//[Moteur | FQN]
		public CrossReference getMoteurMoteurCrossReference_2_0() { return cMoteurMoteurCrossReference_2_0; }
		
		//FQN
		public RuleCall getMoteurMoteurFQNParserRuleCall_2_0_1() { return cMoteurMoteurFQNParserRuleCall_2_0_1; }
		
		////STRING
		//   ','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//speed=INT
		public Assignment getSpeedAssignment_4() { return cSpeedAssignment_4; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_4_0() { return cSpeedINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//angle=INT
		public Assignment getAngleAssignment_6() { return cAngleAssignment_6; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_6_0() { return cAngleINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMoteurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMoteurMoteurCrossReference_2_0 = (CrossReference)cMoteurAssignment_2.eContents().get(0);
		private final RuleCall cMoteurMoteurFQNParserRuleCall_2_0_1 = (RuleCall)cMoteurMoteurCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Stop returns Stop:
		//    'stop'
		//    '('
		//     moteur =[Moteur | FQN] //STRING
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'stop'
		//'('
		// moteur =[Moteur | FQN] //STRING
		//')'
		public Group getGroup() { return cGroup; }
		
		//'stop'
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//moteur =[Moteur | FQN]
		public Assignment getMoteurAssignment_2() { return cMoteurAssignment_2; }
		
		//[Moteur | FQN]
		public CrossReference getMoteurMoteurCrossReference_2_0() { return cMoteurMoteurCrossReference_2_0; }
		
		//FQN
		public RuleCall getMoteurMoteurFQNParserRuleCall_2_0_1() { return cMoteurMoteurFQNParserRuleCall_2_0_1; }
		
		////STRING
		//   ')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LeftMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.LeftMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialSpeedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialSpeedINTTerminalRuleCall_2_1_0 = (RuleCall)cInitialSpeedAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortMOTORIDTerminalRuleCall_3_1_0 = (RuleCall)cPortAssignment_3_1.eContents().get(0);
		
		//LeftMotor returns LeftMotor:
		//    'leftMotor'
		//    name = ID
		//    ('=' initialSpeed = INT)?
		//    ('on' (port = MOTORID))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'leftMotor'
		//name = ID
		//('=' initialSpeed = INT)?
		//('on' (port = MOTORID))
		public Group getGroup() { return cGroup; }
		
		//'leftMotor'
		public Keyword getLeftMotorKeyword_0() { return cLeftMotorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' initialSpeed = INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//initialSpeed = INT
		public Assignment getInitialSpeedAssignment_2_1() { return cInitialSpeedAssignment_2_1; }
		
		//INT
		public RuleCall getInitialSpeedINTTerminalRuleCall_2_1_0() { return cInitialSpeedINTTerminalRuleCall_2_1_0; }
		
		//('on' (port = MOTORID))
		public Group getGroup_3() { return cGroup_3; }
		
		//'on'
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }
		
		//(port = MOTORID)
		public Assignment getPortAssignment_3_1() { return cPortAssignment_3_1; }
		
		//MOTORID
		public RuleCall getPortMOTORIDTerminalRuleCall_3_1_0() { return cPortMOTORIDTerminalRuleCall_3_1_0; }
	}
	public class RightMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.RightMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialSpeedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialSpeedINTTerminalRuleCall_2_1_0 = (RuleCall)cInitialSpeedAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPortMOTORIDTerminalRuleCall_3_1_0 = (RuleCall)cPortAssignment_3_1.eContents().get(0);
		
		//RightMotor returns RightMotor:
		//    'rightMotor'
		//    name = ID
		//    ('=' initialSpeed = INT)?
		//    ('on' (port = MOTORID))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rightMotor'
		//name = ID
		//('=' initialSpeed = INT)?
		//('on' (port = MOTORID))
		public Group getGroup() { return cGroup; }
		
		//'rightMotor'
		public Keyword getRightMotorKeyword_0() { return cRightMotorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' initialSpeed = INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//initialSpeed = INT
		public Assignment getInitialSpeedAssignment_2_1() { return cInitialSpeedAssignment_2_1; }
		
		//INT
		public RuleCall getInitialSpeedINTTerminalRuleCall_2_1_0() { return cInitialSpeedINTTerminalRuleCall_2_1_0; }
		
		//('on' (port = MOTORID))
		public Group getGroup_3() { return cGroup_3; }
		
		//'on'
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }
		
		//(port = MOTORID)
		public Assignment getPortAssignment_3_1() { return cPortAssignment_3_1; }
		
		//MOTORID
		public RuleCall getPortMOTORIDTerminalRuleCall_3_1_0() { return cPortMOTORIDTerminalRuleCall_3_1_0; }
	}
	public class InfraredSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.InfraredSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInfraredSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//InfraredSensor returns InfraredSensor:
		//    'infraredSensor'
		//    name = ID
		//    ('on' (sensorPort = INT))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'infraredSensor'
		//name = ID
		//('on' (sensorPort = INT))
		public Group getGroup() { return cGroup; }
		
		//'infraredSensor'
		public Keyword getInfraredSensorKeyword_0() { return cInfraredSensorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class GyroSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.GyroSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGyroSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//GyroSensor returns GyroSensor:
		//    'gyroSensor'
		//    name = ID
		//    ('on' (sensorPort = INT))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'gyroSensor'
		//name = ID
		//('on' (sensorPort = INT))
		public Group getGroup() { return cGroup; }
		
		//'gyroSensor'
		public Keyword getGyroSensorKeyword_0() { return cGyroSensorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class GPSSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.GPSSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGpsSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//GPSSensor returns GPSSensor:
		//    'gpsSensor'
		//    name = ID
		//    ('on' (sensorPort = INT))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'gpsSensor'
		//name = ID
		//('on' (sensorPort = INT))
		public Group getGroup() { return cGroup; }
		
		//'gpsSensor'
		public Keyword getGpsSensorKeyword_0() { return cGpsSensorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class LightSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.LightSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLightSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//LightSensor returns LightSensor:
		//    'lightSensor'
		//    name=ID
		//    ('on' (sensorPort = INT))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'lightSensor'
		//name=ID
		//('on' (sensorPort = INT))
		public Group getGroup() { return cGroup; }
		
		//'lightSensor'
		public Keyword getLightSensorKeyword_0() { return cLightSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class UltrasonicSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.UltrasonicSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUltrasonicSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//UltrasonicSensor returns UltrasonicSensor:
		//    'ultrasonicSensor'
		//    name=ID
		//    ('on' (sensorPort = INT))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ultrasonicSensor'
		//name=ID
		//('on' (sensorPort = INT))
		public Group getGroup() { return cGroup; }
		
		//'ultrasonicSensor'
		public Keyword getUltrasonicSensorKeyword_0() { return cUltrasonicSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class ColorSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.ColorSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//ColorSensor returns ColorSensor:
		//    'colorSensor'
		//    name = ID
		//    ('on' (sensorPort = INT))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'colorSensor'
		//name = ID
		//('on' (sensorPort = INT))
		public Group getGroup() { return cGroup; }
		
		//'colorSensor'
		public Keyword getColorSensorKeyword_0() { return cColorSensorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class PositionSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.PositionSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSensorPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSensorPortINTTerminalRuleCall_2_1_0 = (RuleCall)cSensorPortAssignment_2_1.eContents().get(0);
		
		//PositionSensor returns PositionSensor:
		//    'positionSensor'
		//    name = ID
		//    ('on' (sensorPort = INT))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'positionSensor'
		//name = ID
		//('on' (sensorPort = INT))?
		public Group getGroup() { return cGroup; }
		
		//'positionSensor'
		public Keyword getPositionSensorKeyword_0() { return cPositionSensorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('on' (sensorPort = INT))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'on'
		public Keyword getOnKeyword_2_0() { return cOnKeyword_2_0; }
		
		//(sensorPort = INT)
		public Assignment getSensorPortAssignment_2_1() { return cSensorPortAssignment_2_1; }
		
		//INT
		public RuleCall getSensorPortINTTerminalRuleCall_2_1_0() { return cSensorPortINTTerminalRuleCall_2_1_0; }
	}
	public class IntensitySensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.IntensitySensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntensitySensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IntensitySensor returns IntensitySensor:
		//    'intensitySensor'
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'intensitySensor'
		//name = ID
		public Group getGroup() { return cGroup; }
		
		//'intensitySensor'
		public Keyword getIntensitySensorKeyword_0() { return cIntensitySensorKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftmotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftmotorLeftMotorCrossReference_2_0 = (CrossReference)cLeftmotorAssignment_2.eContents().get(0);
		private final RuleCall cLeftmotorLeftMotorFQNParserRuleCall_2_0_1 = (RuleCall)cLeftmotorLeftMotorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightmotorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightmotorRightMotorCrossReference_4_0 = (CrossReference)cRightmotorAssignment_4.eContents().get(0);
		private final RuleCall cRightmotorRightMotorFQNParserRuleCall_4_0_1 = (RuleCall)cRightmotorRightMotorCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSpeedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSpeedINTTerminalRuleCall_6_0 = (RuleCall)cSpeedAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Move returns Move:
		//    'move'
		//    '('
		//    leftmotor = [LeftMotor | FQN]
		//    ','
		//    rightmotor = [RightMotor | FQN]
		//    ','
		//    speed = INT
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'move'
		//'('
		//leftmotor = [LeftMotor | FQN]
		//','
		//rightmotor = [RightMotor | FQN]
		//','
		//speed = INT
		//')'
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftmotor = [LeftMotor | FQN]
		public Assignment getLeftmotorAssignment_2() { return cLeftmotorAssignment_2; }
		
		//[LeftMotor | FQN]
		public CrossReference getLeftmotorLeftMotorCrossReference_2_0() { return cLeftmotorLeftMotorCrossReference_2_0; }
		
		//FQN
		public RuleCall getLeftmotorLeftMotorFQNParserRuleCall_2_0_1() { return cLeftmotorLeftMotorFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightmotor = [RightMotor | FQN]
		public Assignment getRightmotorAssignment_4() { return cRightmotorAssignment_4; }
		
		//[RightMotor | FQN]
		public CrossReference getRightmotorRightMotorCrossReference_4_0() { return cRightmotorRightMotorCrossReference_4_0; }
		
		//FQN
		public RuleCall getRightmotorRightMotorFQNParserRuleCall_4_0_1() { return cRightmotorRightMotorFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//speed = INT
		public Assignment getSpeedAssignment_6() { return cSpeedAssignment_6; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_6_0() { return cSpeedINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class MoveLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.MoveLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftmotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftmotorLeftMotorCrossReference_2_0 = (CrossReference)cLeftmotorAssignment_2.eContents().get(0);
		private final RuleCall cLeftmotorLeftMotorFQNParserRuleCall_2_0_1 = (RuleCall)cLeftmotorLeftMotorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightmotorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightmotorRightMotorCrossReference_4_0 = (CrossReference)cRightmotorAssignment_4.eContents().get(0);
		private final RuleCall cRightmotorRightMotorFQNParserRuleCall_4_0_1 = (RuleCall)cRightmotorRightMotorCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSpeedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSpeedINTTerminalRuleCall_6_0 = (RuleCall)cSpeedAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MoveLeft returns MoveLeft:
		//    'moveLeft'
		//    '('
		//    leftmotor = [LeftMotor | FQN]
		//    ','
		//    rightmotor = [RightMotor | FQN]
		//    ','
		//    speed = INT
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'moveLeft'
		//'('
		//leftmotor = [LeftMotor | FQN]
		//','
		//rightmotor = [RightMotor | FQN]
		//','
		//speed = INT
		//')'
		public Group getGroup() { return cGroup; }
		
		//'moveLeft'
		public Keyword getMoveLeftKeyword_0() { return cMoveLeftKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftmotor = [LeftMotor | FQN]
		public Assignment getLeftmotorAssignment_2() { return cLeftmotorAssignment_2; }
		
		//[LeftMotor | FQN]
		public CrossReference getLeftmotorLeftMotorCrossReference_2_0() { return cLeftmotorLeftMotorCrossReference_2_0; }
		
		//FQN
		public RuleCall getLeftmotorLeftMotorFQNParserRuleCall_2_0_1() { return cLeftmotorLeftMotorFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightmotor = [RightMotor | FQN]
		public Assignment getRightmotorAssignment_4() { return cRightmotorAssignment_4; }
		
		//[RightMotor | FQN]
		public CrossReference getRightmotorRightMotorCrossReference_4_0() { return cRightmotorRightMotorCrossReference_4_0; }
		
		//FQN
		public RuleCall getRightmotorRightMotorFQNParserRuleCall_4_0_1() { return cRightmotorRightMotorFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//speed = INT
		public Assignment getSpeedAssignment_6() { return cSpeedAssignment_6; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_6_0() { return cSpeedINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SetThankElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.SetThank");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetThankKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftmotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLeftmotorLeftMotorCrossReference_2_0 = (CrossReference)cLeftmotorAssignment_2.eContents().get(0);
		private final RuleCall cLeftmotorLeftMotorFQNParserRuleCall_2_0_1 = (RuleCall)cLeftmotorLeftMotorCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightmotorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRightmotorRightMotorCrossReference_4_0 = (CrossReference)cRightmotorAssignment_4.eContents().get(0);
		private final RuleCall cRightmotorRightMotorFQNParserRuleCall_4_0_1 = (RuleCall)cRightmotorRightMotorCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SetThank returns SetThank:
		//    'setThank'
		//    '('
		//    leftmotor = [LeftMotor | FQN]
		//    ','
		//    rightmotor = [RightMotor | FQN]
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'setThank'
		//'('
		//leftmotor = [LeftMotor | FQN]
		//','
		//rightmotor = [RightMotor | FQN]
		//')'
		public Group getGroup() { return cGroup; }
		
		//'setThank'
		public Keyword getSetThankKeyword_0() { return cSetThankKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//leftmotor = [LeftMotor | FQN]
		public Assignment getLeftmotorAssignment_2() { return cLeftmotorAssignment_2; }
		
		//[LeftMotor | FQN]
		public CrossReference getLeftmotorLeftMotorCrossReference_2_0() { return cLeftmotorLeftMotorCrossReference_2_0; }
		
		//FQN
		public RuleCall getLeftmotorLeftMotorFQNParserRuleCall_2_0_1() { return cLeftmotorLeftMotorFQNParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//rightmotor = [RightMotor | FQN]
		public Assignment getRightmotorAssignment_4() { return cRightmotorAssignment_4; }
		
		//[RightMotor | FQN]
		public CrossReference getRightmotorRightMotorCrossReference_4_0() { return cRightmotorRightMotorCrossReference_4_0; }
		
		//FQN
		public RuleCall getRightmotorRightMotorFQNParserRuleCall_4_0_1() { return cRightmotorRightMotorFQNParserRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionMotorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfMotorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatement_ImplParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAccelerateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOnForRotationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMoveParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMoveLeftParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetThankParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLeftRotationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRightRotationParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWhileLoopParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAssignmentParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cComparison_ImplParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cSubstractionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cGreaterThanParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cLowerThanParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cEqualParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cForLoopParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cAdditionParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cMultiplicationParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cDivisionParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cActionsParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		
		////ColorRef |
		//Statement returns Statement:
		//    ConditionMotor | IfMotor | IfCondition | Statement_Impl | Accelerate| Stop| OnForRotation | Move | MoveLeft | SetThank| LeftRotation | RightRotation | WhileLoop | Assignment | Comparison_Impl | Substraction | GreaterThan | LowerThan | Equal | ForLoop | Addition | Multiplication | Division | Actions;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionMotor | IfMotor | IfCondition | Statement_Impl | Accelerate| Stop| OnForRotation | Move | MoveLeft | SetThank| LeftRotation | RightRotation | WhileLoop | Assignment | Comparison_Impl | Substraction | GreaterThan | LowerThan | Equal | ForLoop | Addition | Multiplication | Division | Actions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionMotor
		public RuleCall getConditionMotorParserRuleCall_0() { return cConditionMotorParserRuleCall_0; }
		
		//IfMotor
		public RuleCall getIfMotorParserRuleCall_1() { return cIfMotorParserRuleCall_1; }
		
		//IfCondition
		public RuleCall getIfConditionParserRuleCall_2() { return cIfConditionParserRuleCall_2; }
		
		//Statement_Impl
		public RuleCall getStatement_ImplParserRuleCall_3() { return cStatement_ImplParserRuleCall_3; }
		
		//Accelerate
		public RuleCall getAccelerateParserRuleCall_4() { return cAccelerateParserRuleCall_4; }
		
		//Stop
		public RuleCall getStopParserRuleCall_5() { return cStopParserRuleCall_5; }
		
		//OnForRotation
		public RuleCall getOnForRotationParserRuleCall_6() { return cOnForRotationParserRuleCall_6; }
		
		//Move
		public RuleCall getMoveParserRuleCall_7() { return cMoveParserRuleCall_7; }
		
		//MoveLeft
		public RuleCall getMoveLeftParserRuleCall_8() { return cMoveLeftParserRuleCall_8; }
		
		//SetThank
		public RuleCall getSetThankParserRuleCall_9() { return cSetThankParserRuleCall_9; }
		
		//LeftRotation
		public RuleCall getLeftRotationParserRuleCall_10() { return cLeftRotationParserRuleCall_10; }
		
		//RightRotation
		public RuleCall getRightRotationParserRuleCall_11() { return cRightRotationParserRuleCall_11; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_12() { return cWhileLoopParserRuleCall_12; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_13() { return cAssignmentParserRuleCall_13; }
		
		//Comparison_Impl
		public RuleCall getComparison_ImplParserRuleCall_14() { return cComparison_ImplParserRuleCall_14; }
		
		//Substraction
		public RuleCall getSubstractionParserRuleCall_15() { return cSubstractionParserRuleCall_15; }
		
		//GreaterThan
		public RuleCall getGreaterThanParserRuleCall_16() { return cGreaterThanParserRuleCall_16; }
		
		//LowerThan
		public RuleCall getLowerThanParserRuleCall_17() { return cLowerThanParserRuleCall_17; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_18() { return cEqualParserRuleCall_18; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_19() { return cForLoopParserRuleCall_19; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_20() { return cAdditionParserRuleCall_20; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_21() { return cMultiplicationParserRuleCall_21; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_22() { return cDivisionParserRuleCall_22; }
		
		//Actions
		public RuleCall getActionsParserRuleCall_23() { return cActionsParserRuleCall_23; }
	}
	public class ConditionMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.ConditionMotor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfMotorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElseMotorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////| VariableRef
		//ConditionMotor returns ConditionMotor:
		//    IfMotor | ElseMotor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IfMotor | ElseMotor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfMotor
		public RuleCall getIfMotorParserRuleCall_0() { return cIfMotorParserRuleCall_0; }
		
		//ElseMotor
		public RuleCall getElseMotorParserRuleCall_1() { return cElseMotorParserRuleCall_1; }
	}
	public class BooleanOperationsOnMotorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.BooleanOperationsOnMotors");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEqualMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGreatherThanMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanOperationsOnMotors returns BooleanOperationsOnMotors:
		//    EqualM | GreatherThanM
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualM | GreatherThanM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EqualM
		public RuleCall getEqualMParserRuleCall_0() { return cEqualMParserRuleCall_0; }
		
		//GreatherThanM
		public RuleCall getGreatherThanMParserRuleCall_1() { return cGreatherThanMParserRuleCall_1; }
	}
	public class GreatherThanMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.GreatherThanM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGreatherThanMAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftCColorRefParserRuleCall_1_0 = (RuleCall)cLeftCAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightCVariableRefParserRuleCall_3_0 = (RuleCall)cRightCAssignment_3.eContents().get(0);
		
		//GreatherThanM returns GreatherThanM:
		//    {GreatherThanM}
		//    leftC=ColorRef
		//    '>'
		//    rightC=VariableRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GreatherThanM}
		//leftC=ColorRef
		//'>'
		//rightC=VariableRef
		public Group getGroup() { return cGroup; }
		
		//{GreatherThanM}
		public Action getGreatherThanMAction_0() { return cGreatherThanMAction_0; }
		
		//leftC=ColorRef
		public Assignment getLeftCAssignment_1() { return cLeftCAssignment_1; }
		
		//ColorRef
		public RuleCall getLeftCColorRefParserRuleCall_1_0() { return cLeftCColorRefParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//rightC=VariableRef
		public Assignment getRightCAssignment_3() { return cRightCAssignment_3; }
		
		//VariableRef
		public RuleCall getRightCVariableRefParserRuleCall_3_0() { return cRightCVariableRefParserRuleCall_3_0; }
	}
	public class EqualMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.EqualM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualMAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftCColorRefParserRuleCall_1_0 = (RuleCall)cLeftCAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightCAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightCVariableRefParserRuleCall_3_0 = (RuleCall)cRightCAssignment_3.eContents().get(0);
		
		//EqualM returns EqualM:
		//    {EqualM}
		//    leftC=ColorRef
		//    '=='
		//    rightC=VariableRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualM}
		//leftC=ColorRef
		//'=='
		//rightC=VariableRef
		public Group getGroup() { return cGroup; }
		
		//{EqualM}
		public Action getEqualMAction_0() { return cEqualMAction_0; }
		
		//leftC=ColorRef
		public Assignment getLeftCAssignment_1() { return cLeftCAssignment_1; }
		
		//ColorRef
		public RuleCall getLeftCColorRefParserRuleCall_1_0() { return cLeftCColorRefParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//rightC=VariableRef
		public Assignment getRightCAssignment_3() { return cRightCAssignment_3; }
		
		//VariableRef
		public RuleCall getRightCVariableRefParserRuleCall_3_0() { return cRightCVariableRefParserRuleCall_3_0; }
	}
	public class IfMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.IfMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfMotorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoolMAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoolMBooleanOperationsOnMotorsParserRuleCall_3_0 = (RuleCall)cBoolMAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElsemotorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElsemotorElseMotorParserRuleCall_8_0 = (RuleCall)cElsemotorAssignment_8.eContents().get(0);
		
		//IfMotor returns IfMotor:
		//    {IfMotor}
		//    'ifM'
		//    '('boolM=BooleanOperationsOnMotors')'
		//    '{'
		//    (statement+=Statement)*
		//    '}'
		//    (elsemotor += ElseMotor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfMotor}
		//'ifM'
		//'('boolM=BooleanOperationsOnMotors')'
		//'{'
		//(statement+=Statement)*
		//'}'
		//(elsemotor += ElseMotor)*
		public Group getGroup() { return cGroup; }
		
		//{IfMotor}
		public Action getIfMotorAction_0() { return cIfMotorAction_0; }
		
		//'ifM'
		public Keyword getIfMKeyword_1() { return cIfMKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//boolM=BooleanOperationsOnMotors
		public Assignment getBoolMAssignment_3() { return cBoolMAssignment_3; }
		
		//BooleanOperationsOnMotors
		public RuleCall getBoolMBooleanOperationsOnMotorsParserRuleCall_3_0() { return cBoolMBooleanOperationsOnMotorsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_6_0() { return cStatementStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//(elsemotor += ElseMotor)*
		public Assignment getElsemotorAssignment_8() { return cElsemotorAssignment_8; }
		
		//ElseMotor
		public RuleCall getElsemotorElseMotorParserRuleCall_8_0() { return cElsemotorElseMotorParserRuleCall_8_0; }
	}
	public class ElseMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.ElseMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseMotorAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_1_2_0 = (RuleCall)cStatementAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ElseMotor returns ElseMotor:
		//    {ElseMotor}
		//    ('else'
		//        '{'
		//        (statement+=Statement)*
		//        '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseMotor}
		//('else'
		//    '{'
		//    (statement+=Statement)*
		//    '}')
		public Group getGroup() { return cGroup; }
		
		//{ElseMotor}
		public Action getElseMotorAction_0() { return cElseMotorAction_0; }
		
		//('else'
		//    '{'
		//    (statement+=Statement)*
		//    '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'else'
		public Keyword getElseKeyword_1_0() { return cElseKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_1_2() { return cStatementAssignment_1_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_2_0() { return cStatementStatementParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComparison_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubstractionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGreaterThanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLowerThanParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEqualParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAdditionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMultiplicationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDivisionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Expression returns Expression:
		//    Reference | Assignment | Comparison_Impl | Substraction | GreaterThan | LowerThan | Equal | Addition | Multiplication | Division;
		@Override public ParserRule getRule() { return rule; }
		
		//Reference | Assignment | Comparison_Impl | Substraction | GreaterThan | LowerThan | Equal | Addition | Multiplication | Division
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
		
		//Comparison_Impl
		public RuleCall getComparison_ImplParserRuleCall_2() { return cComparison_ImplParserRuleCall_2; }
		
		//Substraction
		public RuleCall getSubstractionParserRuleCall_3() { return cSubstractionParserRuleCall_3; }
		
		//GreaterThan
		public RuleCall getGreaterThanParserRuleCall_4() { return cGreaterThanParserRuleCall_4; }
		
		//LowerThan
		public RuleCall getLowerThanParserRuleCall_5() { return cLowerThanParserRuleCall_5; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_6() { return cEqualParserRuleCall_6; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_7() { return cAdditionParserRuleCall_7; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_8() { return cMultiplicationParserRuleCall_8; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_9() { return cDivisionParserRuleCall_9; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Reference");
		private final RuleCall cVariableRefParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Reference returns Reference:
		//     VariableRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall() { return cVariableRefParserRuleCall; }
	}
	public class ColorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.ColorRef");
		private final Assignment cReferencetocolorAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencetocolorReferenceToColorCrossReference_0 = (CrossReference)cReferencetocolorAssignment.eContents().get(0);
		private final RuleCall cReferencetocolorReferenceToColorIDTerminalRuleCall_0_1 = (RuleCall)cReferencetocolorReferenceToColorCrossReference_0.eContents().get(1);
		
		////ColorRef |
		//ColorRef returns ColorRef:
		//         referencetocolor=[ReferenceToColor|ID]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//referencetocolor=[ReferenceToColor|ID]
		public Assignment getReferencetocolorAssignment() { return cReferencetocolorAssignment; }
		
		//[ReferenceToColor|ID]
		public CrossReference getReferencetocolorReferenceToColorCrossReference_0() { return cReferencetocolorReferenceToColorCrossReference_0; }
		
		//ID
		public RuleCall getReferencetocolorReferenceToColorIDTerminalRuleCall_0_1() { return cReferencetocolorReferenceToColorIDTerminalRuleCall_0_1; }
	}
	public class ConditionnalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Conditionnal");
		private final RuleCall cIfConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Conditionnal returns Conditionnal:
		//    IfCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IfCondition
		public RuleCall getIfConditionParserRuleCall() { return cIfConditionParserRuleCall; }
	}
	public class IfConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.IfCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cStatementAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_7_2_0 = (RuleCall)cStatementAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//IfCondition returns IfCondition:
		//    //'WhileLoop'
		//    'if'
		//        //'expression'
		//        '('expression=Expression')'
		//        //('and' expression = Expression )?
		//        '{'
		//            (statement+=Statement)*
		//        '}'
		//        ('else'
		//        '{'
		//        (statement+=Statement)*
		//        '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////'WhileLoop'
		//'if'
		//    //'expression'
		//    '('expression=Expression')'
		//    //('and' expression = Expression )?
		//    '{'
		//        (statement+=Statement)*
		//    '}'
		//    ('else'
		//    '{'
		//    (statement+=Statement)*
		//    '}')?
		public Group getGroup() { return cGroup; }
		
		////'WhileLoop'
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		////'expression'
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		////('and' expression = Expression )?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_5_0() { return cStatementStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('else'
		//'{'
		//(statement+=Statement)*
		//'}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_7_2() { return cStatementAssignment_7_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_7_2_0() { return cStatementStatementParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cVariableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitialValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitialValueINTTerminalRuleCall_5_0 = (RuleCall)cInitialValueAssignment_5.eContents().get(0);
		
		//Variable returns Variable:
		//    {Variable}
		//    (isConst?='const')?
		//    'Variable' name =ID
		//    '='
		//    (initialValue = INT)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable}
		//(isConst?='const')?
		//'Variable' name =ID
		//'='
		//(initialValue = INT)?
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'Variable'
		public Keyword getVariableKeyword_2() { return cVariableKeyword_2; }
		
		//name =ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//(initialValue = INT)?
		public Assignment getInitialValueAssignment_5() { return cInitialValueAssignment_5; }
		
		//INT
		public RuleCall getInitialValueINTTerminalRuleCall_5_0() { return cInitialValueINTTerminalRuleCall_5_0; }
	}
	public class Statement_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Statement_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStatementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////enum EInt:
		////;
		//Statement_Impl returns Statement:
		//    {Statement}
		//    'Statement'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement}
		//'Statement'
		public Group getGroup() { return cGroup; }
		
		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }
		
		//'Statement'
		public Keyword getStatementKeyword_1() { return cStatementKeyword_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////EInt returns ecore::EInt:
		////;
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileLoop returns WhileLoop:
		//    //'WhileLoop'
		//    'while'
		//        //'expression'
		//        expression=Expression
		//        '{'
		//            (statement+=Statement)*
		//        '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'WhileLoop'
		//'while'
		//    //'expression'
		//    expression=Expression
		//    '{'
		//        (statement+=Statement)*
		//    '}'
		public Group getGroup() { return cGroup; }
		
		////'WhileLoop'
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		////'expression'
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.VariableRef");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableRef returns VariableRef:
		//    //'VariableRef'
		//    //'{'
		//        //'variable'
		//         variable=[Variable|ID]
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'VariableRef'
		////'{'
		//    //'variable'
		//     variable=[Variable|ID]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable|ID]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assignment returns Assignment:
		//    //'Assignment'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        ':='
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Assignment'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    ':='
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'Assignment'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class Comparison_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Comparison_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Comparison_Impl returns Comparison:
		//    //'Comparison'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Comparison'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'Comparison'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SubstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Substraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Substraction returns Substraction:
		//    //'Substraction'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        //'right'
		//        '-'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Substraction'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    //'right'
		//    '-'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'Substraction'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		////'right'
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GreaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.GreaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GreaterThan returns GreaterThan:
		//    //'GreaterThan'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        '>'
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'GreaterThan'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    '>'
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'GreaterThan'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LowerThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.LowerThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LowerThan returns LowerThan:
		//    //'LowerThan'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        '<'
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'LowerThan'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    '<'
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'LowerThan'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equal returns Equal:
		//    //'Equal'
		//    //'{'
		//    //    'left'
		//    '('
		//        left=Expression
		//        '=='
		//        //'right'
		//        right=Expression
		//    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Equal'
		////'{'
		////    'left'
		//'('
		//    left=Expression
		//    '=='
		//    //'right'
		//    right=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		////'Equal'
		////'{'
		////    'left'
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForLoop returns ForLoop:
		//    //'ForLoop'
		//    //'{'
		//        //'expression'
		//        'for'
		//        expression=Expression
		//        '{'
		//            (statement+=Statement)*
		//        '}'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'ForLoop'
		////'{'
		//    //'expression'
		//    'for'
		//    expression=Expression
		//    '{'
		//        (statement+=Statement)*
		//    '}'
		public Group getGroup() { return cGroup; }
		
		////'ForLoop'
		////'{'
		//    //'expression'
		//    'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Addition returns Addition:
		//    //'Addition'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        '+'
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Addition'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    '+'
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'Addition'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplication returns Multiplication:
		//    //'Multiplication'
		//    //'{'
		//        '('
		//        //'left'
		//        left=Expression
		//        '*'
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Multiplication'
		////'{'
		//    '('
		//    //'left'
		//    left=Expression
		//    '*'
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'Multiplication'
		////'{'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		////'left'
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Division returns Division:
		//    //'Division'
		//    //'{'
		//        //'left'
		//        '('
		//        left=Expression
		//        '/'
		//        //'right'
		//        right=Expression
		//        ')'
		//    //'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////'Division'
		////'{'
		//    //'left'
		//    '('
		//    left=Expression
		//    '/'
		//    //'right'
		//    right=Expression
		//    ')'
		public Group getGroup() { return cGroup; }
		
		////'Division'
		////'{'
		//    //'left'
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		////'right'
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ProgramElements pProgram;
	private final ReferenceToColorElements pReferenceToColor;
	private final RobotElements pRobot;
	private final SensorElements pSensor;
	private final ActionsElements pActions;
	private final MoteurElements pMoteur;
	private final TurnOnElements pTurnOn;
	private final AccelerateElements pAccelerate;
	private final RotateElements pRotate;
	private final LeftRotationElements pLeftRotation;
	private final RightRotationElements pRightRotation;
	private final FQNElements pFQN;
	private final OnForRotationElements pOnForRotation;
	private final StopElements pStop;
	private final LeftMotorElements pLeftMotor;
	private final RightMotorElements pRightMotor;
	private final TerminalRule tMOTORID;
	private final InfraredSensorElements pInfraredSensor;
	private final GyroSensorElements pGyroSensor;
	private final GPSSensorElements pGPSSensor;
	private final LightSensorElements pLightSensor;
	private final UltrasonicSensorElements pUltrasonicSensor;
	private final ColorSensorElements pColorSensor;
	private final PositionSensorElements pPositionSensor;
	private final IntensitySensorElements pIntensitySensor;
	private final MoveElements pMove;
	private final MoveLeftElements pMoveLeft;
	private final SetThankElements pSetThank;
	private final StatementElements pStatement;
	private final ConditionMotorElements pConditionMotor;
	private final BooleanOperationsOnMotorsElements pBooleanOperationsOnMotors;
	private final GreatherThanMElements pGreatherThanM;
	private final EqualMElements pEqualM;
	private final IfMotorElements pIfMotor;
	private final ElseMotorElements pElseMotor;
	private final ExpressionElements pExpression;
	private final ReferenceElements pReference;
	private final ColorRefElements pColorRef;
	private final ConditionnalElements pConditionnal;
	private final IfConditionElements pIfCondition;
	private final VariableElements pVariable;
	private final Statement_ImplElements pStatement_Impl;
	private final EBooleanElements pEBoolean;
	private final WhileLoopElements pWhileLoop;
	private final VariableRefElements pVariableRef;
	private final AssignmentElements pAssignment;
	private final Comparison_ImplElements pComparison_Impl;
	private final SubstractionElements pSubstraction;
	private final GreaterThanElements pGreaterThan;
	private final LowerThanElements pLowerThan;
	private final EqualElements pEqual;
	private final ForLoopElements pForLoop;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProgGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pReferenceToColor = new ReferenceToColorElements();
		this.pRobot = new RobotElements();
		this.pSensor = new SensorElements();
		this.pActions = new ActionsElements();
		this.pMoteur = new MoteurElements();
		this.pTurnOn = new TurnOnElements();
		this.pAccelerate = new AccelerateElements();
		this.pRotate = new RotateElements();
		this.pLeftRotation = new LeftRotationElements();
		this.pRightRotation = new RightRotationElements();
		this.pFQN = new FQNElements();
		this.pOnForRotation = new OnForRotationElements();
		this.pStop = new StopElements();
		this.pLeftMotor = new LeftMotorElements();
		this.pRightMotor = new RightMotorElements();
		this.tMOTORID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.univcotedazur.l3ia.program.Prog.MOTORID");
		this.pInfraredSensor = new InfraredSensorElements();
		this.pGyroSensor = new GyroSensorElements();
		this.pGPSSensor = new GPSSensorElements();
		this.pLightSensor = new LightSensorElements();
		this.pUltrasonicSensor = new UltrasonicSensorElements();
		this.pColorSensor = new ColorSensorElements();
		this.pPositionSensor = new PositionSensorElements();
		this.pIntensitySensor = new IntensitySensorElements();
		this.pMove = new MoveElements();
		this.pMoveLeft = new MoveLeftElements();
		this.pSetThank = new SetThankElements();
		this.pStatement = new StatementElements();
		this.pConditionMotor = new ConditionMotorElements();
		this.pBooleanOperationsOnMotors = new BooleanOperationsOnMotorsElements();
		this.pGreatherThanM = new GreatherThanMElements();
		this.pEqualM = new EqualMElements();
		this.pIfMotor = new IfMotorElements();
		this.pElseMotor = new ElseMotorElements();
		this.pExpression = new ExpressionElements();
		this.pReference = new ReferenceElements();
		this.pColorRef = new ColorRefElements();
		this.pConditionnal = new ConditionnalElements();
		this.pIfCondition = new IfConditionElements();
		this.pVariable = new VariableElements();
		this.pStatement_Impl = new Statement_ImplElements();
		this.pEBoolean = new EBooleanElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pVariableRef = new VariableRefElements();
		this.pAssignment = new AssignmentElements();
		this.pComparison_Impl = new Comparison_ImplElements();
		this.pSubstraction = new SubstractionElements();
		this.pGreaterThan = new GreaterThanElements();
		this.pLowerThan = new LowerThanElements();
		this.pEqual = new EqualElements();
		this.pForLoop = new ForLoopElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.univcotedazur.l3ia.program.Prog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'Program'
	//      name = ID
	//        (robot+=Robot)*
	//        (variable+=Variable)*
	//        (referencetocolor+=ReferenceToColor)*
	//        (statement+=Statement)*
	//        //(statement+=Statement(';'statement+=Statement)*)?
	//        //'statement' '{'
	//        // statement+=Statement ( ","
	//        // '}' )?
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//ReferenceToColor returns ReferenceToColor:
	//    {ReferenceToColor}
	//    'ref' name =ID
	//    '='
	//    '('
	//    (colorsensor = [ColorSensor | FQN])
	//    'color_name'
	//    ')'
	//    ;
	public ReferenceToColorElements getReferenceToColorAccess() {
		return pReferenceToColor;
	}
	
	public ParserRule getReferenceToColorRule() {
		return getReferenceToColorAccess().getRule();
	}
	
	//Robot returns Robot:
	//    'Robot'
	//    name = ID
	//    '{'
	//    (moteur+=Moteur)*
	//    (sensor+=Sensor)*
	//    '}'
	//;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    IntensitySensor | ColorSensor | PositionSensor | InfraredSensor | GyroSensor | GPSSensor | LightSensor | UltrasonicSensor
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actions returns Actions:
	//    Stop | OnForRotation | Accelerate | TurnOn
	//;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Moteur returns Moteur:
	//    LeftMotor |RightMotor
	//;
	public MoteurElements getMoteurAccess() {
		return pMoteur;
	}
	
	public ParserRule getMoteurRule() {
		return getMoteurAccess().getRule();
	}
	
	//TurnOn returns TurnOn:
	//    'turnOn'
	//    '('
	//     moteur =[Moteur | FQN] //STRING
	//     (',' ('speed' '=')? speed = INT)?
	//    ')'
	//;
	public TurnOnElements getTurnOnAccess() {
		return pTurnOn;
	}
	
	public ParserRule getTurnOnRule() {
		return getTurnOnAccess().getRule();
	}
	
	//Accelerate returns Accelerate:
	//    'accelerate'
	//    '('
	//    moteur = [Moteur | FQN] //STRING
	//    (',' ('speed' '=')? speed = INT)?
	//    (',' ('seconds' '=')? duration=INT)?
	//    ')'
	//;
	public AccelerateElements getAccelerateAccess() {
		return pAccelerate;
	}
	
	public ParserRule getAccelerateRule() {
		return getAccelerateAccess().getRule();
	}
	
	//Rotate returns Rotate:
	//    LeftRotation | RightRotation
	//;
	public RotateElements getRotateAccess() {
		return pRotate;
	}
	
	public ParserRule getRotateRule() {
		return getRotateAccess().getRule();
	}
	
	//LeftRotation returns LeftRotation:
	//    'turnLeft'
	//    '('
	//    leftmotor = [LeftMotor | FQN]
	//    ','
	//    rightmotor = [RightMotor | FQN]
	//    (',' ('angle' '=')? angle = INT)?
	//    (',' ('seconds' '=')? duration=INT)?
	//    ')'
	//;
	public LeftRotationElements getLeftRotationAccess() {
		return pLeftRotation;
	}
	
	public ParserRule getLeftRotationRule() {
		return getLeftRotationAccess().getRule();
	}
	
	//RightRotation returns RightRotation:
	//    'turnRight'
	//    '('
	//    leftmotor = [LeftMotor | FQN]
	//    ','
	//    rightmotor = [RightMotor | FQN]
	//    (',' ('angle' '=')? angle = INT)?
	//    (',' ('seconds' '=')? duration=INT)?
	//    ')'
	//;
	public RightRotationElements getRightRotationAccess() {
		return pRightRotation;
	}
	
	public ParserRule getRightRotationRule() {
		return getRightRotationAccess().getRule();
	}
	
	///*Rotate returns Rotate:
	//    'rotate'
	//    '('
	//    moteur = [Moteur | FQN]
	//    (',' ('angle' '=')? angle = INT)?
	//    ')'
	//;"""*/
	//FQN: //Fully Qualified Name
	//    ID('.'ID)*
	//;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//OnForRotation returns OnForRotation:
	//    'onForRotation'
	//    '('
	//    moteur =[Moteur | FQN] //STRING
	//    ','
	//    speed=INT
	//    ','
	//    angle=INT
	//    ')'
	//;
	public OnForRotationElements getOnForRotationAccess() {
		return pOnForRotation;
	}
	
	public ParserRule getOnForRotationRule() {
		return getOnForRotationAccess().getRule();
	}
	
	//Stop returns Stop:
	//    'stop'
	//    '('
	//     moteur =[Moteur | FQN] //STRING
	//    ')'
	//;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}
	
	//LeftMotor returns LeftMotor:
	//    'leftMotor'
	//    name = ID
	//    ('=' initialSpeed = INT)?
	//    ('on' (port = MOTORID))
	//;
	public LeftMotorElements getLeftMotorAccess() {
		return pLeftMotor;
	}
	
	public ParserRule getLeftMotorRule() {
		return getLeftMotorAccess().getRule();
	}
	
	//RightMotor returns RightMotor:
	//    'rightMotor'
	//    name = ID
	//    ('=' initialSpeed = INT)?
	//    ('on' (port = MOTORID))
	//;
	public RightMotorElements getRightMotorAccess() {
		return pRightMotor;
	}
	
	public ParserRule getRightMotorRule() {
		return getRightMotorAccess().getRule();
	}
	
	//terminal MOTORID: ('A'..'H');
	public TerminalRule getMOTORIDRule() {
		return tMOTORID;
	}
	
	//InfraredSensor returns InfraredSensor:
	//    'infraredSensor'
	//    name = ID
	//    ('on' (sensorPort = INT))
	//;
	public InfraredSensorElements getInfraredSensorAccess() {
		return pInfraredSensor;
	}
	
	public ParserRule getInfraredSensorRule() {
		return getInfraredSensorAccess().getRule();
	}
	
	//GyroSensor returns GyroSensor:
	//    'gyroSensor'
	//    name = ID
	//    ('on' (sensorPort = INT))
	//;
	public GyroSensorElements getGyroSensorAccess() {
		return pGyroSensor;
	}
	
	public ParserRule getGyroSensorRule() {
		return getGyroSensorAccess().getRule();
	}
	
	//GPSSensor returns GPSSensor:
	//    'gpsSensor'
	//    name = ID
	//    ('on' (sensorPort = INT))
	//;
	public GPSSensorElements getGPSSensorAccess() {
		return pGPSSensor;
	}
	
	public ParserRule getGPSSensorRule() {
		return getGPSSensorAccess().getRule();
	}
	
	//LightSensor returns LightSensor:
	//    'lightSensor'
	//    name=ID
	//    ('on' (sensorPort = INT))
	//;
	public LightSensorElements getLightSensorAccess() {
		return pLightSensor;
	}
	
	public ParserRule getLightSensorRule() {
		return getLightSensorAccess().getRule();
	}
	
	//UltrasonicSensor returns UltrasonicSensor:
	//    'ultrasonicSensor'
	//    name=ID
	//    ('on' (sensorPort = INT))
	//;
	public UltrasonicSensorElements getUltrasonicSensorAccess() {
		return pUltrasonicSensor;
	}
	
	public ParserRule getUltrasonicSensorRule() {
		return getUltrasonicSensorAccess().getRule();
	}
	
	//ColorSensor returns ColorSensor:
	//    'colorSensor'
	//    name = ID
	//    ('on' (sensorPort = INT))
	//;
	public ColorSensorElements getColorSensorAccess() {
		return pColorSensor;
	}
	
	public ParserRule getColorSensorRule() {
		return getColorSensorAccess().getRule();
	}
	
	//PositionSensor returns PositionSensor:
	//    'positionSensor'
	//    name = ID
	//    ('on' (sensorPort = INT))?
	//;
	public PositionSensorElements getPositionSensorAccess() {
		return pPositionSensor;
	}
	
	public ParserRule getPositionSensorRule() {
		return getPositionSensorAccess().getRule();
	}
	
	//IntensitySensor returns IntensitySensor:
	//    'intensitySensor'
	//    name = ID
	//;
	public IntensitySensorElements getIntensitySensorAccess() {
		return pIntensitySensor;
	}
	
	public ParserRule getIntensitySensorRule() {
		return getIntensitySensorAccess().getRule();
	}
	
	//Move returns Move:
	//    'move'
	//    '('
	//    leftmotor = [LeftMotor | FQN]
	//    ','
	//    rightmotor = [RightMotor | FQN]
	//    ','
	//    speed = INT
	//    ')'
	//;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//MoveLeft returns MoveLeft:
	//    'moveLeft'
	//    '('
	//    leftmotor = [LeftMotor | FQN]
	//    ','
	//    rightmotor = [RightMotor | FQN]
	//    ','
	//    speed = INT
	//    ')'
	//;
	public MoveLeftElements getMoveLeftAccess() {
		return pMoveLeft;
	}
	
	public ParserRule getMoveLeftRule() {
		return getMoveLeftAccess().getRule();
	}
	
	//SetThank returns SetThank:
	//    'setThank'
	//    '('
	//    leftmotor = [LeftMotor | FQN]
	//    ','
	//    rightmotor = [RightMotor | FQN]
	//    ')'
	//;
	public SetThankElements getSetThankAccess() {
		return pSetThank;
	}
	
	public ParserRule getSetThankRule() {
		return getSetThankAccess().getRule();
	}
	
	////ColorRef |
	//Statement returns Statement:
	//    ConditionMotor | IfMotor | IfCondition | Statement_Impl | Accelerate| Stop| OnForRotation | Move | MoveLeft | SetThank| LeftRotation | RightRotation | WhileLoop | Assignment | Comparison_Impl | Substraction | GreaterThan | LowerThan | Equal | ForLoop | Addition | Multiplication | Division | Actions;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	////| VariableRef
	//ConditionMotor returns ConditionMotor:
	//    IfMotor | ElseMotor
	//;
	public ConditionMotorElements getConditionMotorAccess() {
		return pConditionMotor;
	}
	
	public ParserRule getConditionMotorRule() {
		return getConditionMotorAccess().getRule();
	}
	
	//BooleanOperationsOnMotors returns BooleanOperationsOnMotors:
	//    EqualM | GreatherThanM
	//;
	public BooleanOperationsOnMotorsElements getBooleanOperationsOnMotorsAccess() {
		return pBooleanOperationsOnMotors;
	}
	
	public ParserRule getBooleanOperationsOnMotorsRule() {
		return getBooleanOperationsOnMotorsAccess().getRule();
	}
	
	//GreatherThanM returns GreatherThanM:
	//    {GreatherThanM}
	//    leftC=ColorRef
	//    '>'
	//    rightC=VariableRef
	//;
	public GreatherThanMElements getGreatherThanMAccess() {
		return pGreatherThanM;
	}
	
	public ParserRule getGreatherThanMRule() {
		return getGreatherThanMAccess().getRule();
	}
	
	//EqualM returns EqualM:
	//    {EqualM}
	//    leftC=ColorRef
	//    '=='
	//    rightC=VariableRef
	//;
	public EqualMElements getEqualMAccess() {
		return pEqualM;
	}
	
	public ParserRule getEqualMRule() {
		return getEqualMAccess().getRule();
	}
	
	//IfMotor returns IfMotor:
	//    {IfMotor}
	//    'ifM'
	//    '('boolM=BooleanOperationsOnMotors')'
	//    '{'
	//    (statement+=Statement)*
	//    '}'
	//    (elsemotor += ElseMotor)*
	//;
	public IfMotorElements getIfMotorAccess() {
		return pIfMotor;
	}
	
	public ParserRule getIfMotorRule() {
		return getIfMotorAccess().getRule();
	}
	
	//ElseMotor returns ElseMotor:
	//    {ElseMotor}
	//    ('else'
	//        '{'
	//        (statement+=Statement)*
	//        '}')
	//;
	public ElseMotorElements getElseMotorAccess() {
		return pElseMotor;
	}
	
	public ParserRule getElseMotorRule() {
		return getElseMotorAccess().getRule();
	}
	
	//Expression returns Expression:
	//    Reference | Assignment | Comparison_Impl | Substraction | GreaterThan | LowerThan | Equal | Addition | Multiplication | Division;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Reference returns Reference:
	//     VariableRef
	//;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	////ColorRef |
	//ColorRef returns ColorRef:
	//         referencetocolor=[ReferenceToColor|ID]
	//    ;
	public ColorRefElements getColorRefAccess() {
		return pColorRef;
	}
	
	public ParserRule getColorRefRule() {
		return getColorRefAccess().getRule();
	}
	
	//Conditionnal returns Conditionnal:
	//    IfCondition
	//;
	public ConditionnalElements getConditionnalAccess() {
		return pConditionnal;
	}
	
	public ParserRule getConditionnalRule() {
		return getConditionnalAccess().getRule();
	}
	
	//IfCondition returns IfCondition:
	//    //'WhileLoop'
	//    'if'
	//        //'expression'
	//        '('expression=Expression')'
	//        //('and' expression = Expression )?
	//        '{'
	//            (statement+=Statement)*
	//        '}'
	//        ('else'
	//        '{'
	//        (statement+=Statement)*
	//        '}')?
	//;
	public IfConditionElements getIfConditionAccess() {
		return pIfCondition;
	}
	
	public ParserRule getIfConditionRule() {
		return getIfConditionAccess().getRule();
	}
	
	//Variable returns Variable:
	//    {Variable}
	//    (isConst?='const')?
	//    'Variable' name =ID
	//    '='
	//    (initialValue = INT)?
	//    ;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////enum EInt:
	////;
	//Statement_Impl returns Statement:
	//    {Statement}
	//    'Statement'
	//    ;
	public Statement_ImplElements getStatement_ImplAccess() {
		return pStatement_Impl;
	}
	
	public ParserRule getStatement_ImplRule() {
		return getStatement_ImplAccess().getRule();
	}
	
	////EInt returns ecore::EInt:
	////;
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//WhileLoop returns WhileLoop:
	//    //'WhileLoop'
	//    'while'
	//        //'expression'
	//        expression=Expression
	//        '{'
	//            (statement+=Statement)*
	//        '}'
	//    ;
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//VariableRef returns VariableRef:
	//    //'VariableRef'
	//    //'{'
	//        //'variable'
	//         variable=[Variable|ID]
	//    //'}'
	//    ;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Assignment returns Assignment:
	//    //'Assignment'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        ':='
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Comparison_Impl returns Comparison:
	//    //'Comparison'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public Comparison_ImplElements getComparison_ImplAccess() {
		return pComparison_Impl;
	}
	
	public ParserRule getComparison_ImplRule() {
		return getComparison_ImplAccess().getRule();
	}
	
	//Substraction returns Substraction:
	//    //'Substraction'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        //'right'
	//        '-'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public SubstractionElements getSubstractionAccess() {
		return pSubstraction;
	}
	
	public ParserRule getSubstractionRule() {
		return getSubstractionAccess().getRule();
	}
	
	//GreaterThan returns GreaterThan:
	//    //'GreaterThan'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        '>'
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public GreaterThanElements getGreaterThanAccess() {
		return pGreaterThan;
	}
	
	public ParserRule getGreaterThanRule() {
		return getGreaterThanAccess().getRule();
	}
	
	//LowerThan returns LowerThan:
	//    //'LowerThan'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        '<'
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public LowerThanElements getLowerThanAccess() {
		return pLowerThan;
	}
	
	public ParserRule getLowerThanRule() {
		return getLowerThanAccess().getRule();
	}
	
	//Equal returns Equal:
	//    //'Equal'
	//    //'{'
	//    //    'left'
	//    '('
	//        left=Expression
	//        '=='
	//        //'right'
	//        right=Expression
	//    ')'
	//    ;
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//ForLoop returns ForLoop:
	//    //'ForLoop'
	//    //'{'
	//        //'expression'
	//        'for'
	//        expression=Expression
	//        '{'
	//            (statement+=Statement)*
	//        '}'
	//    //'}'
	//    ;
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//Addition returns Addition:
	//    //'Addition'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        '+'
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Multiplication:
	//    //'Multiplication'
	//    //'{'
	//        '('
	//        //'left'
	//        left=Expression
	//        '*'
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Division returns Division:
	//    //'Division'
	//    //'{'
	//        //'left'
	//        '('
	//        left=Expression
	//        '/'
	//        //'right'
	//        right=Expression
	//        ')'
	//    //'}'
	//    ;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
