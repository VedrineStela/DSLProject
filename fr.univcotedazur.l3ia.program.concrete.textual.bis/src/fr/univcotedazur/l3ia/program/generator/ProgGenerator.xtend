/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.program.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.univcotedazur.l3ia.Tp_03_02_2022.Variable
import fr.univcotedazur.l3ia.Tp_03_02_2022.Program
import fr.univcotedazur.l3ia.Tp_03_02_2022.Addition
import fr.univcotedazur.l3ia.Tp_03_02_2022.Statement
import fr.univcotedazur.l3ia.Tp_03_02_2022.VariableRef
import fr.univcotedazur.l3ia.Tp_03_02_2022.Assignment
import fr.univcotedazur.l3ia.Tp_03_02_2022.GreaterThan
import fr.univcotedazur.l3ia.Tp_03_02_2022.ForLoop
import fr.univcotedazur.l3ia.Tp_03_02_2022.WhileLoop
import fr.univcotedazur.l3ia.Tp_03_02_2022.Robot
import fr.univcotedazur.l3ia.Tp_03_02_2022.Moteur
import fr.univcotedazur.l3ia.Tp_03_02_2022.RightMotor
import fr.univcotedazur.l3ia.Tp_03_02_2022.LeftMotor
import fr.univcotedazur.l3ia.Tp_03_02_2022.Sensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.ColorSensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.UltrasonicSensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.GyroSensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.GPSSensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.InfraredSensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.LightSensor
import fr.univcotedazur.l3ia.Tp_03_02_2022.Actions
import fr.univcotedazur.l3ia.Tp_03_02_2022.TurnOn
import fr.univcotedazur.l3ia.Tp_03_02_2022.Stop
import fr.univcotedazur.l3ia.Tp_03_02_2022.Accelerate
//import fr.univcotedazur.l3ia.Tp_03_02_2022.Rotate
import fr.univcotedazur.l3ia.Tp_03_02_2022.LeftRotation
import fr.univcotedazur.l3ia.Tp_03_02_2022.RightRotation
import fr.univcotedazur.l3ia.Tp_03_02_2022.Move
import fr.univcotedazur.l3ia.Tp_03_02_2022.IfCondition
import fr.univcotedazur.l3ia.Tp_03_02_2022.Equal
import fr.univcotedazur.l3ia.Tp_03_02_2022.IfMotor
import fr.univcotedazur.l3ia.Tp_03_02_2022.BooleanOperationsOnMotors
import fr.univcotedazur.l3ia.Tp_03_02_2022.EqualM
import fr.univcotedazur.l3ia.Tp_03_02_2022.ColorRef
import fr.univcotedazur.l3ia.Tp_03_02_2022.ReferenceToColor
import fr.univcotedazur.l3ia.Tp_03_02_2022.GreatherThanM
import fr.univcotedazur.l3ia.Tp_03_02_2022.ElseMotor
import fr.univcotedazur.l3ia.Tp_03_02_2022.SetThank
import fr.univcotedazur.l3ia.Tp_03_02_2022.MoveLeft
import fr.univcotedazur.l3ia.Tp_03_02_2022.OnForRotation

//import fr.univcotedazur.l3ia.Tp_03_02_2022.WhileLoop

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ProgGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var Program prog = (resource.allContents.head as Program)
		var fileContent='''#!/usr/bin/env python3
		
		# Import the necessary libraries
		import time
		import math
		from ev3dev2.motor import *
		from ev3dev2.sound import Sound
		from ev3dev2.button import Button
		from ev3dev2.sensor import *
		from ev3dev2.sensor.lego import *
		from ev3dev2.sensor.virtual import *'''
		
		fileContent+='\n\n'
		
		for (Robot r : prog.robot){
			fileContent+=RobotToPython(r)
		}
		for (Variable v : prog.variable){
			fileContent+=VarToPython(v)
		}
		
		for (Statement s : prog.statement){
			
			fileContent+= StatementToPython(s)
		}
		
		//, 'Variables of my program: '
		
		fsa.generateFile(prog.name+'.txt', ''+ fileContent)
			
	}
	
	def String RobotToPython(Robot r){
		var res=''
		for (Moteur m : r.moteur){
			res+=MoteurToPython(m)
		}
		
		for (Sensor s : r.sensor){
			res+=SensorToPython(s)
		}
		return res
	}
	
	def String SensorToPython(Sensor s){
		var res=''
		var p = '(INPUT_'+s.sensorPort+')\n'
		if(s instanceof ColorSensor){
			res=s.name + ' = '+'ColorSensor'+' '+p
		}
		
		if(s instanceof UltrasonicSensor){
			res=s.name + ' = '+'UltrasonicSensor'+' '+p
		}
		
		if(s instanceof GyroSensor){
			res=s.name + ' = '+'GyroSensor'+' '+p
		}
		
		if(s instanceof GPSSensor){
			res = s.name + ' = '+'GPSSensor'+' '+p
		}
		
		if(s instanceof InfraredSensor){
			res = s.name + ' = '+'InfraredSensor'+' '+p
		}
		
		if(s instanceof LightSensor){
			res = s.name + ' = '+'LightSensor'+' '+p
		}
		return res
	}
	
	
	def String MoteurToPython(Moteur m){
		var res = ''
		var p = '(OUTPUT_'+m.port+')\n'
		
		if(m instanceof RightMotor){
			res=m.name + ' = '+'LargeMotor'+' '+p
		}
		if(m instanceof LeftMotor){
			res=m.name + ' = '+'LargeMotor'+' '+p
		}
		return res
	}
	
	
	def String VarToPython(Variable v){
		var res = v.name + '=' + v.initialValue +'\n'
		return res		
	}
	
	def String AdditionToPython(Addition a){
		var res = StatementToPython(a.left) +' + '+ StatementToPython(a.right)
		return res
		
	}
	
	def String VariableRefToPython(VariableRef vr){
		return vr.variable.name
	}
	
	def String AssignmentToPython(Assignment ass){
		var res = StatementToPython(ass.left) +' = '+ StatementToPython(ass.right)
		return res
	}
	
	def String GreaterThanToPython(GreaterThan gt){
		var res = StatementToPython(gt.left) + '>' + StatementToPython(gt.right)
		return res
	}
	
	def String EqualToPython(Equal e){
		var res = ''
		res = StatementToPython(e.left) + '==' + StatementToPython(e.right)
		return res
	}
	
	def String ForLoopToPython(ForLoop fl){
		var res=''
		res = 'for '+ StatementToPython(fl.expression) + ' :' +'\n' //+ StatementToPython(fl.statement)
		for(Statement st : fl.statement){
			res = res+ '\t'+StatementToPython(st)
		}
		return res
	}
	
	def String WhileLoopToPython(WhileLoop wl){
		var res=''
		res = 'while '+StatementToPython(wl.expression) + ' :' +'\n'
		
		for(Statement st : wl.statement){
			res = res+ '\t'+StatementToPython(st)
		}
		return res
		
	}
	
	def String IfConditionToPython(IfCondition a){
		var res=''
		res = 'if ' + StatementToPython(a.expression) + ':' +'\n'
		for (Statement st : a.statement){
			res=res+ '\t'+StatementToPython(st)
		}
		return res
	}
	
	def String ActionsToPython(Actions a){
		var res=''
		if(a instanceof TurnOn){
			res= a.moteur.name + '.on'+'('+a.speed+')\n'
		}
		
		if(a instanceof Stop){
			res= a.moteur.name + '.off()'+'\n'
		}
		
		if(a instanceof OnForRotation){
			res= a.moteur.name + '.on_for_rotations'+'('+a.speed+','+ a.angle+')\n'
		}
		
		if(a instanceof Accelerate){
			res = a.moteur.name+'.on_for_seconds(speed = '+a.speed+', seconds=' +a.duration+')\n'
		}
	
		return res
	}
	
	def String MoveLeftToPython(MoveLeft a ){
		var res=''
		//res= 'MoveTank'+'('+'OUTPUT_'+a.leftmotor.port+ ','+'OUTPUT_'+a.rightmotor.port+')\n'
		res='tank_drive.on(' + a.speed+', 0)\n'
		return res
	}
	
	def String MoveToPython(Move a ){
		var res=''
		//res= 'MoveTank'+'('+'OUTPUT_'+a.leftmotor.port+ ','+'OUTPUT_'+a.rightmotor.port+')\n'
		res='tank_drive.on(0,'+a.speed+')\n'
		return res
	}
	
	def String SetThankToPython(SetThank a){
		var res=''
		res= 'tank_drive = MoveTank'+'('+'OUTPUT_'+a.leftmotor.port+ ','+'OUTPUT_'+a.rightmotor.port+')\n'
		return res
	}
	
	//res=a.leftmotor.name + '.off()'+'\n'
	//res += a.rightmotor.name+'.on_for_seconds(speed = 20, seconds=2)\n'
	//res+=a.leftmotor.name + '.on'+'('+20+')\n'
	
	def String LeftRotationToPython(LeftRotation a){
		var res='steering_drive.on((-20), 20)\n'
		res+='\t'
		res+='time.sleep(2)\n'
		//res+=''
		return res
	}
	
	
	
	def String RightRotationToPython(RightRotation a){
		var res='steering_drive.on((20), 20)\n'
		res+='\t'
		res+='time.sleep(2)'
		res+='\n'
		return res
	}
	
	def String ReferenceToColorToPython(ReferenceToColor a){
		var res=''
		res= a.colorsensor.name + '.reflected_light_intensity'
		return res
	}
	
	def String ColorRefToPython(ColorRef a){
		var res = ''
		res=ReferenceToColorToPython(a.referencetocolor)
		return res
	}
	
	def String EqualMToPython(EqualM a){
		var res=''
		res = ColorRefToPython(a.leftC) + '=='+VariableRefToPython(a.rightC)
		return res
		
	}
	
	def String GreatherThanMToPython(GreatherThanM a){
		var res=''
		res = ColorRefToPython(a.leftC) + '>'+VariableRefToPython(a.rightC)
		return res
		
	}
	
	def String BooleanOperationsOnMotorsToPython(BooleanOperationsOnMotors a){
		var res = ''
		if(a instanceof EqualM){
			res= EqualMToPython(a)
		}
		if(a instanceof GreatherThanM){
			res=GreatherThanMToPython(a)
		}
		return res
	}
	
	def String ElseMotorToPython(ElseMotor a){
		var res=''
		res='else:'
		res+='\n\t'
		for (Statement st: a.statement){
			res = res+ '\t'+StatementToPython(st)
		}
		return res
	}
	
	
	def String IfMotorToPython(IfMotor a){
		var res=''
		res = 'if '+ BooleanOperationsOnMotorsToPython(a.boolM) + ':'+'\n\t'
		
		for (Statement st: a.statement){
			res = res+ '\t'+StatementToPython(st)
		}
		
		//res=res+'\n'
		
		for (ElseMotor el: a.elsemotor){
			
			res = res+ '\t'+ElseMotorToPython(el)
		}
		res=res+'\n'
		return res
	}
	
	def String StatementToPython(Statement a){
		var res = ' '
		
		if(a instanceof ElseMotor){
			res=ElseMotorToPython(a)
		}
		
		if (a instanceof IfMotor){
			res = IfMotorToPython(a)
		}
		
		if(a instanceof IfCondition){
			res=IfConditionToPython(a)
		}
		if (a instanceof LeftRotation){
			res = LeftRotationToPython(a)
		}
		if(a instanceof RightRotation){
			res = RightRotationToPython(a)
		}
		if(a instanceof Move){
			res=MoveToPython(a)
		}
		if(a instanceof MoveLeft){
			res=MoveLeftToPython(a)
		}
		if(a instanceof SetThank){
			res=SetThankToPython(a)
		}
		if(a instanceof Actions){
			res=ActionsToPython(a)
		}
		if(a instanceof WhileLoop){
			res=WhileLoopToPython(a)
		}
		if(a instanceof ForLoop){
			res=ForLoopToPython(a)
		}
		if(a instanceof Addition){
			res = AdditionToPython(a)
			res = res + '\n'
		}
		if(a instanceof VariableRef){
			res=VariableRefToPython(a)
		}
		if(a instanceof Assignment){
			res=AssignmentToPython(a)
			res = res + '\n'
		}
		if(a instanceof GreaterThan){
			res=GreaterThanToPython(a)
			
		}
		
		if(a instanceof Equal){
			res=EqualToPython(a)
		}
		//res = res + '\n'
		return res
		
	}
	
	
}
