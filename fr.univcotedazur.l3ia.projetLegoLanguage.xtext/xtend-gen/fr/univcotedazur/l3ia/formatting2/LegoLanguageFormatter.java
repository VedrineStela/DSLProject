/**
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.formatting2;

import com.google.inject.Inject;
import fr.univcotedazur.l3ia.projetLegoLanguage.Action;
import fr.univcotedazur.l3ia.projetLegoLanguage.Actor;
import fr.univcotedazur.l3ia.projetLegoLanguage.LeftMotor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Lego;
import fr.univcotedazur.l3ia.projetLegoLanguage.Motor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Port;
import fr.univcotedazur.l3ia.projetLegoLanguage.RightMotor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Robot;
import fr.univcotedazur.l3ia.projetLegoLanguage.Sensor;
import fr.univcotedazur.l3ia.services.LegoLanguageGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LegoLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LegoLanguageGrammarAccess _legoLanguageGrammarAccess;
  
  protected void _format(final Lego lego, @Extension final IFormattableDocument document) {
    document.<Robot>format(lego.getRobot());
  }
  
  protected void _format(final Robot robot, @Extension final IFormattableDocument document) {
    EList<Motor> _moteur = robot.getMoteur();
    for (final Motor motor : _moteur) {
      document.<Motor>format(motor);
    }
    document.<LeftMotor>format(robot.getLeftmotor());
    document.<RightMotor>format(robot.getRightmotor());
    EList<Sensor> _sensor = robot.getSensor();
    for (final Sensor sensor : _sensor) {
      document.<Sensor>format(sensor);
    }
    EList<Port> _port = robot.getPort();
    for (final Port port : _port) {
      document.<Port>format(port);
    }
    EList<Actor> _actor = robot.getActor();
    for (final Actor actor : _actor) {
      document.<Actor>format(actor);
    }
    EList<Action> _action = robot.getAction();
    for (final Action action : _action) {
      document.<Action>format(action);
    }
  }
  
  public void format(final Object lego, final IFormattableDocument document) {
    if (lego instanceof XtextResource) {
      _format((XtextResource)lego, document);
      return;
    } else if (lego instanceof Lego) {
      _format((Lego)lego, document);
      return;
    } else if (lego instanceof Robot) {
      _format((Robot)lego, document);
      return;
    } else if (lego instanceof EObject) {
      _format((EObject)lego, document);
      return;
    } else if (lego == null) {
      _format((Void)null, document);
      return;
    } else if (lego != null) {
      _format(lego, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(lego, document).toString());
    }
  }
}
