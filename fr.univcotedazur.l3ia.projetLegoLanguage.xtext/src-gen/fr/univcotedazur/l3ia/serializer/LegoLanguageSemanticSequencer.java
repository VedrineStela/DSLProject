/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.l3ia.serializer;

import com.google.inject.Inject;
import fr.univcotedazur.l3ia.projetLegoLanguage.Back;
import fr.univcotedazur.l3ia.projetLegoLanguage.ColorSensor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Continue;
import fr.univcotedazur.l3ia.projetLegoLanguage.Down;
import fr.univcotedazur.l3ia.projetLegoLanguage.Go;
import fr.univcotedazur.l3ia.projetLegoLanguage.Left;
import fr.univcotedazur.l3ia.projetLegoLanguage.LeftMotor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Lego;
import fr.univcotedazur.l3ia.projetLegoLanguage.Motor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Port;
import fr.univcotedazur.l3ia.projetLegoLanguage.PositionSensor;
import fr.univcotedazur.l3ia.projetLegoLanguage.ProjetLegoLanguagePackage;
import fr.univcotedazur.l3ia.projetLegoLanguage.Right;
import fr.univcotedazur.l3ia.projetLegoLanguage.RightMotor;
import fr.univcotedazur.l3ia.projetLegoLanguage.Robot;
import fr.univcotedazur.l3ia.projetLegoLanguage.Rotate;
import fr.univcotedazur.l3ia.projetLegoLanguage.Sensor;
import fr.univcotedazur.l3ia.projetLegoLanguage.ShutDown;
import fr.univcotedazur.l3ia.services.LegoLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LegoLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LegoLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProjetLegoLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjetLegoLanguagePackage.BACK:
				sequence_Back(context, (Back) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.COLOR_SENSOR:
				sequence_ColorSensor(context, (ColorSensor) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.CONTINUE:
				sequence_Continue(context, (Continue) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.DOWN:
				sequence_Down(context, (Down) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.GO:
				sequence_Go(context, (Go) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.LEFT:
				sequence_Left(context, (Left) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.LEFT_MOTOR:
				sequence_LeftMotor(context, (LeftMotor) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.LEGO:
				sequence_Lego(context, (Lego) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.MOTOR:
				sequence_Motor_Impl(context, (Motor) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.POSITION_SENSOR:
				sequence_PositionSensor(context, (PositionSensor) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.RIGHT:
				sequence_Right(context, (Right) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.RIGHT_MOTOR:
				sequence_RightMotor(context, (RightMotor) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.ROTATE:
				sequence_Rotate(context, (Rotate) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.SENSOR:
				sequence_Sensor_Impl(context, (Sensor) semanticObject); 
				return; 
			case ProjetLegoLanguagePackage.SHUT_DOWN:
				sequence_ShutDown(context, (ShutDown) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Back
	 *     Back returns Back
	 *
	 * Constraint:
	 *     {Back}
	 */
	protected void sequence_Back(ISerializationContext context, Back semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns ColorSensor
	 *     ColorSensor returns ColorSensor
	 *
	 * Constraint:
	 *     {ColorSensor}
	 */
	protected void sequence_ColorSensor(ISerializationContext context, ColorSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Continue
	 *     Continue returns Continue
	 *
	 * Constraint:
	 *     {Continue}
	 */
	protected void sequence_Continue(ISerializationContext context, Continue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Down
	 *     Down returns Down
	 *
	 * Constraint:
	 *     {Down}
	 */
	protected void sequence_Down(ISerializationContext context, Down semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Go
	 *     Go returns Go
	 *
	 * Constraint:
	 *     {Go}
	 */
	protected void sequence_Go(ISerializationContext context, Go semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Motor returns LeftMotor
	 *     Actor returns LeftMotor
	 *     LeftMotor returns LeftMotor
	 *
	 * Constraint:
	 *     {LeftMotor}
	 */
	protected void sequence_LeftMotor(ISerializationContext context, LeftMotor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Left
	 *     Left returns Left
	 *
	 * Constraint:
	 *     {Left}
	 */
	protected void sequence_Left(ISerializationContext context, Left semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lego returns Lego
	 *
	 * Constraint:
	 *     (name=EString robot=Robot?)
	 */
	protected void sequence_Lego(ISerializationContext context, Lego semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Motor returns Motor
	 *     Actor returns Motor
	 *     Motor_Impl returns Motor
	 *
	 * Constraint:
	 *     {Motor}
	 */
	protected void sequence_Motor_Impl(ISerializationContext context, Motor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Port returns Port
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjetLegoLanguagePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjetLegoLanguagePackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPortAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns PositionSensor
	 *     PositionSensor returns PositionSensor
	 *
	 * Constraint:
	 *     {PositionSensor}
	 */
	protected void sequence_PositionSensor(ISerializationContext context, PositionSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Motor returns RightMotor
	 *     Actor returns RightMotor
	 *     RightMotor returns RightMotor
	 *
	 * Constraint:
	 *     {RightMotor}
	 */
	protected void sequence_RightMotor(ISerializationContext context, RightMotor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Right
	 *     Right returns Right
	 *
	 * Constraint:
	 *     {Right}
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         moteur+=Motor 
	 *         moteur+=Motor* 
	 *         leftmotor=LeftMotor 
	 *         rightmotor=RightMotor 
	 *         (sensor+=Sensor sensor+=Sensor*)? 
	 *         (port+=Port port+=Port*)? 
	 *         (actor+=Actor actor+=Actor*)? 
	 *         (action+=Action action+=Action*)?
	 *     )
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Rotate
	 *     Rotate returns Rotate
	 *
	 * Constraint:
	 *     {Rotate}
	 */
	protected void sequence_Rotate(ISerializationContext context, Rotate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *     Sensor_Impl returns Sensor
	 *
	 * Constraint:
	 *     {Sensor}
	 */
	protected void sequence_Sensor_Impl(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns ShutDown
	 *     ShutDown returns ShutDown
	 *
	 * Constraint:
	 *     {ShutDown}
	 */
	protected void sequence_ShutDown(ISerializationContext context, ShutDown semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
